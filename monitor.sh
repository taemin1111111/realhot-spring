#!/bin/bash

# ===== Ïã§ÏãúÍ∞Ñ ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ Ïä§ÌÅ¨Î¶ΩÌä∏ =====

echo "üìä Ïñ¥ÎîîÌï´ ÏÑ±Îä• Î™®ÎãàÌÑ∞ÎßÅ ÏãúÏûë..."
echo "Ï¢ÖÎ£åÌïòÎ†§Î©¥ Ctrl+CÎ•º ÎàÑÎ•¥ÏÑ∏Ïöî."
echo ""

# Î™®ÎãàÌÑ∞ÎßÅ Í∞ÑÍ≤© (Ï¥à)
INTERVAL=10

# Î°úÍ∑∏ ÌååÏùº
LOG_FILE="performance.log"

# Ìó§Îçî Ï∂úÎ†•
printf "%-20s %-10s %-10s %-10s %-15s %-15s %-10s\n" "TIME" "CPU%" "MEM%" "DISK%" "ACTIVE_CONN" "RESPONSE_TIME" "STATUS"
printf "%-20s %-10s %-10s %-10s %-15s %-15s %-10s\n" "----" "----" "----" "----" "-----------" "-------------" "------"

while true; do
    # ÌòÑÏû¨ ÏãúÍ∞Ñ
    TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')
    
    # CPU ÏÇ¨Ïö©Î•†
    CPU_USAGE=$(docker stats hotplace-app --no-stream --format "{{.CPUPerc}}" | sed 's/%//')
    
    # Î©îÎ™®Î¶¨ ÏÇ¨Ïö©Î•†  
    MEM_USAGE=$(docker stats hotplace-app --no-stream --format "{{.MemPerc}}" | sed 's/%//')
    
    # ÎîîÏä§ÌÅ¨ ÏÇ¨Ïö©Î•†
    DISK_USAGE=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')
    
    # ÌôúÏÑ± Ïó∞Í≤∞ Ïàò (netstat ÏÇ¨Ïö©)
    ACTIVE_CONN=$(docker exec hotplace-app sh -c "netstat -an | grep :8083 | grep ESTABLISHED | wc -l" 2>/dev/null || echo "N/A")
    
    # ÏùëÎãµ ÏãúÍ∞Ñ Ï∏°Ï†ï
    RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" http://localhost:8083/hotplace/actuator/health 2>/dev/null || echo "N/A")
    
    # ÏÑúÎπÑÏä§ ÏÉÅÌÉú
    if curl -f http://localhost:8083/hotplace/actuator/health > /dev/null 2>&1; then
        STATUS="UP"
    else
        STATUS="DOWN"
    fi
    
    # Ï∂úÎ†•
    printf "%-20s %-10s %-10s %-10s %-15s %-15s %-10s\n" \
        "$TIMESTAMP" "${CPU_USAGE}%" "${MEM_USAGE}%" "${DISK_USAGE}%" \
        "$ACTIVE_CONN" "${RESPONSE_TIME}s" "$STATUS"
    
    # Î°úÍ∑∏ ÌååÏùºÏóê Í∏∞Î°ù
    echo "$TIMESTAMP,${CPU_USAGE}%,${MEM_USAGE}%,${DISK_USAGE}%,$ACTIVE_CONN,${RESPONSE_TIME}s,$STATUS" >> $LOG_FILE
    
    # Í≤ΩÍ≥† Ï°∞Í±¥ Ï≤¥ÌÅ¨
    if [ "${CPU_USAGE%.*}" -gt 80 ] 2>/dev/null; then
        echo "‚ö†Ô∏è  WARNING: High CPU usage detected!"
    fi
    
    if [ "${MEM_USAGE%.*}" -gt 85 ] 2>/dev/null; then
        echo "‚ö†Ô∏è  WARNING: High memory usage detected!"
    fi
    
    if [ "$STATUS" = "DOWN" ]; then
        echo "üö® ALERT: Service is DOWN!"
    fi
    
    sleep $INTERVAL
done
