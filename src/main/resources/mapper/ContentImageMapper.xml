<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.wherehot.spring.mapper.ContentImageMapper">

    <!-- 결과 매핑 -->
    <resultMap id="ContentImageResultMap" type="com.wherehot.spring.entity.ContentImages">
        <id property="id" column="id"/>
        <result property="contentId" column="hotplace_id"/>
        <result property="contentType" column="content_type"/>
        <result property="imagePath" column="image_path"/>
        <result property="originalFilename" column="original_filename"/>
        <result property="storedFilename" column="stored_filename"/>
        <result property="fileSize" column="file_size"/>
        <result property="mimeType" column="mime_type"/>
        <result property="isMain" column="is_main"/>
        <result property="sortOrder" column="image_order"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <!-- 특정 핫플레이스의 모든 이미지 조회 (순서대로) -->
    <select id="getImagesByHotplaceId" parameterType="int" resultMap="ContentImageResultMap">
        SELECT id, hotplace_id, 'hotplace' as content_type, image_path, 
               image_order, created_at, created_at as updated_at
        FROM content_images 
        WHERE hotplace_id = #{hotplaceId}
        ORDER BY image_order ASC, created_at ASC
    </select>

    <!-- 이미지 ID로 단일 이미지 조회 -->
    <select id="getImageById" parameterType="int" resultMap="ContentImageResultMap">
        SELECT id, hotplace_id, 'hotplace' as content_type, image_path, 
               image_order, created_at, created_at as updated_at
        FROM content_images 
        WHERE id = #{imageId}
    </select>

    <!-- 이미지 정보 저장 -->
    <insert id="insertImage" parameterType="com.wherehot.spring.entity.ContentImages" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO content_images (hotplace_id, image_path, image_order, created_at)
        VALUES (#{contentId}, #{imagePath}, #{sortOrder}, NOW())
    </insert>

    <!-- 이미지 정보 수정 -->
    <update id="updateImage" parameterType="com.wherehot.spring.entity.ContentImages">
        UPDATE content_images 
        SET 
            image_path = #{imagePath},
            image_order = #{sortOrder}
        WHERE id = #{id}
    </update>

    <!-- 이미지 삭제 -->
    <delete id="deleteImage" parameterType="int">
        DELETE FROM content_images WHERE id = #{imageId}
    </delete>

    <!-- 특정 핫플레이스의 최대 이미지 순서 조회 -->
    <select id="getMaxImageOrder" parameterType="int" resultType="Integer">
        SELECT MAX(image_order) 
        FROM content_images 
        WHERE hotplace_id = #{hotplaceId}
    </select>

    <!-- 대표 이미지 설정 -->
    <update id="setAsMainImage">
        <![CDATA[
        UPDATE content_images 
        SET image_order = CASE 
            WHEN id = #{imageId} THEN 1
            WHEN image_order = 1 AND hotplace_id = #{placeId} AND id != #{imageId} THEN (
                SELECT COALESCE(MAX(temp.image_order), 1) + 1 
                FROM (SELECT image_order FROM content_images WHERE hotplace_id = #{placeId}) temp
            )
            ELSE image_order 
        END
        WHERE hotplace_id = #{placeId}
        ]]>
    </update>

    <!-- 이미지 순서 재정렬 (삭제 후 순서 정리) -->
    <update id="reorderImages" parameterType="int">
        <![CDATA[
        UPDATE content_images c1
        SET image_order = (
            SELECT COUNT(*) 
            FROM (SELECT * FROM content_images) c2 
            WHERE c2.hotplace_id = #{hotplaceId} 
            AND c2.created_at <= c1.created_at
        )
        WHERE hotplace_id = #{hotplaceId}
        ]]>
    </update>

    <!-- 특정 핫플레이스의 총 이미지 수 조회 -->
    <select id="getImageCount" parameterType="int" resultType="int">
        SELECT COUNT(*) 
        FROM content_images 
        WHERE hotplace_id = #{hotplaceId}
    </select>

    <!-- 특정 순서의 이미지 조회 -->
    <select id="getImageByOrder" resultMap="ContentImageResultMap">
        SELECT id, hotplace_id, 'hotplace' as content_type, image_path, 
               image_order, created_at, created_at as updated_at
        FROM content_images 
        WHERE hotplace_id = #{hotplaceId} AND image_order = #{imageOrder}
        LIMIT 1
    </select>

    <!-- 이미지 순서 변경 -->
    <update id="updateImageOrder">
        UPDATE content_images 
        SET image_order = #{newOrder}
        WHERE id = #{imageId}
    </update>

    <!-- 특정 핫플레이스의 모든 이미지 삭제 -->
    <delete id="deleteAllImagesByHotplace" parameterType="int">
        DELETE FROM content_images 
        WHERE hotplace_id = #{hotplaceId}
    </delete>

</mapper>
