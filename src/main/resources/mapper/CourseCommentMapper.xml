<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wherehot.spring.mapper.CourseCommentMapper">

    <!-- 결과 매핑 -->
    <resultMap id="CourseCommentResultMap" type="com.wherehot.spring.entity.CourseComment">
        <id property="id" column="id"/>
        <result property="courseId" column="course_id"/>
        <result property="parentId" column="parent_id"/>
        <result property="authorUserid" column="author_userid"/>
        <result property="nickname" column="nickname"/>
        <result property="passwdHash" column="passwd_hash"/>
        <result property="content" column="content"/>
        <result property="likeCount" column="like_count"/>
        <result property="dislikeCount" column="dislike_count"/>
        <result property="userReaction" column="userReaction"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="isDeleted" column="is_deleted"/>
    </resultMap>

    <!-- 코스의 모든 댓글 조회 (계층 구조) -->
    <select id="getCommentsByCourseId" resultMap="CourseCommentResultMap">
        SELECT id, course_id, parent_id, author_userid, nickname, passwd_hash, 
               content, like_count, dislike_count, created_at, updated_at, is_deleted
        FROM course_comment 
        WHERE course_id = #{courseId} AND is_deleted = 0
        ORDER BY 
            CASE WHEN parent_id IS NULL THEN id END ASC,
            parent_id ASC,
            created_at ASC
    </select>

    <!-- 코스의 부모 댓글만 조회 -->
    <select id="getParentCommentsByCourseId" resultMap="CourseCommentResultMap">
        SELECT id, course_id, parent_id, author_userid, nickname, passwd_hash, 
               content, like_count, dislike_count, created_at, updated_at, is_deleted
        FROM course_comment 
        WHERE course_id = #{courseId} AND parent_id IS NULL AND is_deleted = 0
        ORDER BY created_at DESC
    </select>

    <!-- 댓글 등록 -->
    <insert id="insertCourseComment" parameterType="com.wherehot.spring.entity.CourseComment" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO course_comment (
            course_id, parent_id, author_userid, nickname, passwd_hash, 
            content, like_count, dislike_count, created_at, updated_at, is_deleted
        )
        VALUES (
            #{courseId}, #{parentId}, #{authorUserid}, #{nickname}, #{passwdHash}, 
            #{content}, #{likeCount}, #{dislikeCount}, NOW(), NOW(), 0
        )
    </insert>

    <!-- 댓글 수정 -->
    <update id="updateCourseComment" parameterType="com.wherehot.spring.entity.CourseComment">
        UPDATE course_comment 
        SET content = #{content}, updated_at = NOW()
        WHERE id = #{id} AND is_deleted = 0
    </update>

    <!-- 댓글 삭제 (soft delete) -->
    <update id="deleteCourseComment">
        UPDATE course_comment 
        SET is_deleted = 1, updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 특정 댓글 조회 -->
    <select id="getCourseCommentById" resultMap="CourseCommentResultMap">
        SELECT id, course_id, parent_id, author_userid, nickname, passwd_hash, 
               content, like_count, dislike_count, created_at, updated_at, is_deleted
        FROM course_comment 
        WHERE id = #{id} AND is_deleted = 0
    </select>

    <!-- 코스의 댓글 개수 조회 -->
    <select id="getCommentCountByCourseId" resultType="int">
        SELECT COUNT(*) 
        FROM course_comment 
        WHERE course_id = #{courseId} AND is_deleted = 0
    </select>

    <!-- 부모 댓글의 대댓글 개수 조회 -->
    <select id="getReplyCountByParentId" resultType="int">
        SELECT COUNT(*) 
        FROM course_comment 
        WHERE parent_id = #{parentId} AND is_deleted = 0
    </select>

    <!-- 부모 댓글의 대댓글 목록 조회 -->
    <select id="getRepliesByParentId" resultMap="CourseCommentResultMap">
        SELECT id, course_id, parent_id, author_userid, nickname, passwd_hash, 
               content, like_count, dislike_count, created_at, updated_at, is_deleted
        FROM course_comment 
        WHERE parent_id = #{parentId} AND is_deleted = 0
        ORDER BY created_at ASC
    </select>

    <!-- 코스의 부모 댓글만 조회 (현재 사용자의 리액션 상태 포함) -->
    <select id="getParentCommentsByCourseIdWithUserReaction" resultMap="CourseCommentResultMap">
        SELECT c.id, c.course_id, c.parent_id, c.author_userid, c.nickname, c.passwd_hash, 
               c.content, c.like_count, c.dislike_count, c.created_at, c.updated_at, c.is_deleted,
               r.reaction as userReaction
        FROM course_comment c
        LEFT JOIN course_comment_reaction r ON c.id = r.comment_id AND r.user_key = #{userKey}
        WHERE c.course_id = #{courseId} AND c.parent_id IS NULL AND c.is_deleted = 0
        ORDER BY c.created_at DESC
    </select>

    <!-- 부모 댓글의 대댓글 목록 조회 (현재 사용자의 리액션 상태 포함) -->
    <select id="getRepliesByParentIdWithUserReaction" resultMap="CourseCommentResultMap">
        SELECT c.id, c.course_id, c.parent_id, c.author_userid, c.nickname, c.passwd_hash, 
               c.content, c.like_count, c.dislike_count, c.created_at, c.updated_at, c.is_deleted,
               r.reaction as userReaction
        FROM course_comment c
        LEFT JOIN course_comment_reaction r ON c.id = r.comment_id AND r.user_key = #{userKey}
        WHERE c.parent_id = #{parentId} AND c.is_deleted = 0
        ORDER BY c.created_at ASC
    </select>

</mapper>
