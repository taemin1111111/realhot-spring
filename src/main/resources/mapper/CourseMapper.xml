<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wherehot.spring.mapper.CourseMapper">

    <!-- 결과 매핑 -->
    <resultMap id="CourseResultMap" type="com.wherehot.spring.entity.Course">
        <id property="id" column="id"/>
        <result property="userId" column="user_id"/>
        <result property="title" column="title"/>
        <result property="summary" column="summary"/>
        <result property="authorUserid" column="author_userid"/>
        <result property="nickname" column="nickname"/>
        <result property="passwdHash" column="passwd_hash"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
        <result property="viewCount" column="view_count"/>
        <result property="likeCount" column="like_count"/>
        <result property="dislikeCount" column="dislike_count"/>
        <result property="commentCount" column="comment_count"/>
        <result property="isDeleted" column="is_deleted"/>
    </resultMap>

    <!-- 코스 목록 조회 (페이징) -->
    <select id="getCourseList" resultMap="CourseResultMap">
        SELECT id, user_id, title, summary, author_userid, nickname, passwd_hash,
               created_at, updated_at, view_count, like_count, dislike_count, comment_count, is_deleted
        FROM course 
        WHERE is_deleted = 0
        ORDER BY created_at DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 인기글 조회 (가중치 계산) -->
    <select id="getPopularCourseList" resultMap="CourseResultMap">
        SELECT id, user_id, title, summary, author_userid, nickname, passwd_hash,
               created_at, updated_at, view_count, like_count, dislike_count, comment_count, is_deleted
        FROM course 
        WHERE is_deleted = 0
        ORDER BY (view_count * 0.2 + like_count * 0.5 + comment_count * 0.3) DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 최신글 조회 -->
    <select id="getLatestCourseList" resultMap="CourseResultMap">
        SELECT id, user_id, title, summary, author_userid, nickname, passwd_hash,
               created_at, updated_at, view_count, like_count, dislike_count, comment_count, is_deleted
        FROM course 
        WHERE is_deleted = 0
        ORDER BY created_at DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 지역별 코스 조회 -->
    <select id="getCourseListByRegion" resultMap="CourseResultMap">
        SELECT DISTINCT c.id, c.user_id, c.title, c.summary, c.author_userid, c.nickname, c.passwd_hash,
               c.created_at, c.updated_at, c.view_count, c.like_count, c.dislike_count, c.comment_count, c.is_deleted
        FROM course c
        INNER JOIN course_step cs ON c.id = cs.course_id
        INNER JOIN hotplace_info h ON cs.place_id = h.id
        INNER JOIN place_info p ON h.region_id = p.id
        WHERE c.is_deleted = 0
        <if test="sido != null and sido != ''">
            AND p.sido = #{sido}
        </if>
        <if test="sigungu != null and sigungu != ''">
            AND p.sigungu = #{sigungu}
        </if>
        <if test="dong != null and dong != ''">
            AND p.dong = #{dong}
        </if>
        ORDER BY c.created_at DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 지역별 인기글 조회 -->
    <select id="getPopularCourseListByRegion" resultMap="CourseResultMap">
        SELECT DISTINCT c.id, c.user_id, c.title, c.summary, c.author_userid, c.nickname, c.passwd_hash,
               c.created_at, c.updated_at, c.view_count, c.like_count, c.dislike_count, c.comment_count, c.is_deleted
        FROM course c
        INNER JOIN course_step cs ON c.id = cs.course_id
        INNER JOIN hotplace_info h ON cs.place_id = h.id
        INNER JOIN place_info p ON h.region_id = p.id
        WHERE c.is_deleted = 0
        <if test="sido != null and sido != ''">
            AND p.sido = #{sido}
        </if>
        <if test="sigungu != null and sigungu != ''">
            AND p.sigungu = #{sigungu}
        </if>
        <if test="dong != null and dong != ''">
            AND p.dong = #{dong}
        </if>
        ORDER BY (c.view_count * 0.2 + c.like_count * 0.5 + c.comment_count * 0.3) DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 코스 상세 조회 -->
    <select id="getCourseById" resultMap="CourseResultMap">
        SELECT id, user_id, title, summary, author_userid, nickname, passwd_hash,
               created_at, updated_at, view_count, like_count, dislike_count, comment_count, is_deleted
        FROM course 
        WHERE id = #{id} AND is_deleted = 0
    </select>

    <!-- 코스 등록 -->
    <insert id="insertCourse" parameterType="com.wherehot.spring.entity.Course" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO course (user_id, title, summary, author_userid, nickname, passwd_hash, created_at, updated_at, view_count, like_count, dislike_count, comment_count, is_deleted)
        VALUES (#{userId}, #{title}, #{summary}, #{authorUserid}, #{nickname}, #{passwdHash}, NOW(), NOW(), 0, 0, 0, 0, 0)
    </insert>

    <!-- 코스 수정 -->
    <update id="updateCourse" parameterType="com.wherehot.spring.entity.Course">
        UPDATE course 
        SET title = #{title}, summary = #{summary}, updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- 조회수 증가 -->
    <update id="incrementViewCount">
        UPDATE course SET view_count = view_count + 1 WHERE id = #{id}
    </update>

    <!-- 좋아요 수 증가 -->
    <update id="incrementLikeCount">
        UPDATE course SET like_count = like_count + 1 WHERE id = #{id}
    </update>

    <!-- 좋아요 수 감소 -->
    <update id="decrementLikeCount">
        UPDATE course SET like_count = GREATEST(like_count - 1, 0) WHERE id = #{id}
    </update>

    <!-- 싫어요 수 증가 -->
    <update id="incrementDislikeCount">
        UPDATE course SET dislike_count = dislike_count + 1 WHERE id = #{id}
    </update>

    <!-- 싫어요 수 감소 -->
    <update id="decrementDislikeCount">
        UPDATE course SET dislike_count = GREATEST(dislike_count - 1, 0) WHERE id = #{id}
    </update>

    <!-- 댓글 수 증가 -->
    <update id="incrementCommentCount">
        UPDATE course SET comment_count = comment_count + 1 WHERE id = #{id}
    </update>

    <!-- 댓글 수 감소 -->
    <update id="decrementCommentCount">
        UPDATE course SET comment_count = GREATEST(comment_count - 1, 0) WHERE id = #{id}
    </update>

    <!-- 전체 코스 수 조회 -->
    <select id="getTotalCourseCount" resultType="int">
        SELECT COUNT(*) FROM course WHERE is_deleted = 0
    </select>

    <!-- 지역별 코스 수 조회 -->
    <select id="getCourseCountByRegion" resultType="int">
        SELECT COUNT(DISTINCT c.id)
        FROM course c
        INNER JOIN course_step cs ON c.id = cs.course_id
        INNER JOIN hotplace_info h ON cs.place_id = h.id
        INNER JOIN place_info p ON h.region_id = p.id
        WHERE c.is_deleted = 0
        <if test="sido != null and sido != ''">
            AND p.sido = #{sido}
        </if>
        <if test="sigungu != null and sigungu != ''">
            AND p.sigungu = #{sigungu}
        </if>
        <if test="dong != null and dong != ''">
            AND p.dong = #{dong}
        </if>
    </select>

    <!-- 코스 삭제 (물리적 삭제) -->
    <delete id="deleteCourse">
        DELETE FROM course WHERE id = #{id}
    </delete>

    <!-- 검색으로 최신글 조회 -->
    <select id="getLatestCourseListBySearch" resultMap="CourseResultMap">
        SELECT DISTINCT c.id, c.user_id, c.title, c.summary, c.author_userid, c.nickname, c.passwd_hash,
               c.created_at, c.updated_at, c.view_count, c.like_count, c.dislike_count, c.comment_count, c.is_deleted
        FROM course c
        LEFT JOIN course_step cs ON c.id = cs.course_id
        LEFT JOIN hotplace_info h ON cs.place_id = h.id
        WHERE c.is_deleted = 0
        AND (
            c.title LIKE CONCAT('%', #{keyword}, '%')
            OR c.summary LIKE CONCAT('%', #{keyword}, '%')
            OR h.name LIKE CONCAT('%', #{keyword}, '%')
        )
        ORDER BY c.created_at DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 검색으로 인기글 조회 -->
    <select id="getPopularCourseListBySearch" resultMap="CourseResultMap">
        SELECT DISTINCT c.id, c.user_id, c.title, c.summary, c.author_userid, c.nickname, c.passwd_hash,
               c.created_at, c.updated_at, c.view_count, c.like_count, c.dislike_count, c.comment_count, c.is_deleted
        FROM course c
        LEFT JOIN course_step cs ON c.id = cs.course_id
        LEFT JOIN hotplace_info h ON cs.place_id = h.id
        WHERE c.is_deleted = 0
        AND (
            c.title LIKE CONCAT('%', #{keyword}, '%')
            OR c.summary LIKE CONCAT('%', #{keyword}, '%')
            OR h.name LIKE CONCAT('%', #{keyword}, '%')
        )
        ORDER BY (c.view_count * 0.2 + c.like_count * 0.5 + c.comment_count * 0.3) DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 검색으로 코스 수 조회 -->
    <select id="getCourseCountBySearch" resultType="int">
        SELECT COUNT(DISTINCT c.id)
        FROM course c
        LEFT JOIN course_step cs ON c.id = cs.course_id
        LEFT JOIN hotplace_info h ON cs.place_id = h.id
        WHERE c.is_deleted = 0
        AND (
            c.title LIKE CONCAT('%', #{keyword}, '%')
            OR c.summary LIKE CONCAT('%', #{keyword}, '%')
            OR h.name LIKE CONCAT('%', #{keyword}, '%')
        )
    </select>

</mapper>
