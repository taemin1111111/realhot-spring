<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wherehot.spring.mapper.HpostMapper">

    <!-- 결과 매핑 -->
    <resultMap id="HpostResultMap" type="com.wherehot.spring.entity.Hpost">
        <id property="id" column="id"/>
        <result property="categoryId" column="category_id"/>
        <result property="userid" column="userid"/>
        <result property="userip" column="userip"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="photo1" column="photo1"/>
        <result property="photo2" column="photo2"/>
        <result property="photo3" column="photo3"/>
        <result property="views" column="views"/>
        <result property="likes" column="likes"/>
        <result property="dislikes" column="dislikes"/>
        <result property="createdAt" column="created_at"/>
        <result property="nickname" column="nickname"/>
        <result property="passwd" column="passwd"/>
        <result property="reports" column="reports"/>
        <result property="isDeleted" column="is_deleted"/>
    </resultMap>

    <!-- 게시글 목록 조회 (페이징) -->
    <select id="getHpostList" resultMap="HpostResultMap">
        SELECT id, category_id, userid, userip, title, content, photo1, photo2, photo3,
               views, likes, dislikes, created_at, nickname, passwd, reports, is_deleted
        FROM hottalk_post 
        WHERE is_deleted = 0
        ORDER BY created_at DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 인기글 조회 (가중치 계산) -->
    <select id="getPopularHpostList" resultMap="HpostResultMap">
        SELECT id, category_id, userid, userip, title, content, photo1, photo2, photo3,
               views, likes, dislikes, created_at, nickname, passwd, reports, is_deleted,
               (likes * 3 + views * 1 + (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(created_at)) / 3600 * -0.1) as popularity_score
        FROM hottalk_post 
        WHERE is_deleted = 0
        ORDER BY popularity_score DESC, created_at DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 최신글 조회 -->
    <select id="getLatestHpostList" resultMap="HpostResultMap">
        SELECT id, category_id, userid, userip, title, content, photo1, photo2, photo3,
               views, likes, dislikes, created_at, nickname, passwd, reports, is_deleted
        FROM hottalk_post 
        WHERE is_deleted = 0
        ORDER BY created_at DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 카테고리별 게시글 조회 -->
    <select id="getHpostListByCategory" resultMap="HpostResultMap">
        SELECT id, category_id, userid, userip, title, content, photo1, photo2, photo3,
               views, likes, dislikes, created_at, nickname, passwd, reports, is_deleted
        FROM hottalk_post 
        WHERE category_id = #{categoryId} AND is_deleted = 0
        ORDER BY created_at DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 카테고리별 인기글 조회 -->
    <select id="getPopularHpostListByCategory" resultMap="HpostResultMap">
        SELECT id, category_id, userid, userip, title, content, photo1, photo2, photo3,
               views, likes, dislikes, created_at, nickname, passwd, reports, is_deleted,
               (likes * 3 + views * 1 + (UNIX_TIMESTAMP(NOW()) - UNIX_TIMESTAMP(created_at)) / 3600 * -0.1) as popularity_score
        FROM hottalk_post 
        WHERE category_id = #{categoryId} AND is_deleted = 0
        ORDER BY popularity_score DESC, created_at DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 게시글 상세 조회 -->
    <select id="getHpostById" resultMap="HpostResultMap">
        SELECT id, category_id, userid, userip, title, content, photo1, photo2, photo3,
               views, likes, dislikes, created_at, nickname, passwd, reports, is_deleted
        FROM hottalk_post 
        WHERE id = #{id} AND is_deleted = 0
    </select>

    <!-- 게시글 등록 -->
    <insert id="insertHpost" parameterType="com.wherehot.spring.entity.Hpost" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO hottalk_post (
            category_id, userid, userip, title, content, photo1, photo2, photo3,
            views, likes, dislikes, created_at, nickname, passwd, reports, is_deleted
        ) VALUES (
            #{categoryId}, #{userid}, #{userip}, #{title}, #{content}, #{photo1}, #{photo2}, #{photo3},
            #{views}, #{likes}, #{dislikes}, NOW(), #{nickname}, #{passwd}, #{reports}, #{isDeleted}
        )
    </insert>

    <!-- 게시글 수정 -->
    <update id="updateHpost" parameterType="com.wherehot.spring.entity.Hpost">
        UPDATE hottalk_post 
        SET 
            title = #{title},
            content = #{content},
            category_id = #{categoryId},
            photo1 = #{photo1},
            photo2 = #{photo2},
            photo3 = #{photo3},
            nickname = #{nickname},
            passwd = #{passwd}
        WHERE id = #{id}
    </update>

    <!-- 조회수 증가 -->
    <update id="incrementViewCount">
        UPDATE hottalk_post 
        SET views = views + 1
        WHERE id = #{id}
    </update>

    <!-- 좋아요 수 증가 -->
    <update id="incrementLikeCount">
        UPDATE hottalk_post 
        SET likes = likes + 1
        WHERE id = #{id}
    </update>

    <!-- 좋아요 수 감소 -->
    <update id="decrementLikeCount">
        UPDATE hottalk_post 
        SET likes = GREATEST(likes - 1, 0)
        WHERE id = #{id}
    </update>

    <!-- 싫어요 수 증가 -->
    <update id="incrementDislikeCount">
        UPDATE hottalk_post 
        SET dislikes = dislikes + 1
        WHERE id = #{id}
    </update>

    <!-- 싫어요 수 감소 -->
    <update id="decrementDislikeCount">
        UPDATE hottalk_post 
        SET dislikes = GREATEST(dislikes - 1, 0)
        WHERE id = #{id}
    </update>

    <!-- 댓글 수 증가 -->
    <update id="incrementCommentCount">
        UPDATE hottalk_post 
        SET comment_count = comment_count + 1
        WHERE id = #{id}
    </update>

    <!-- 댓글 수 감소 -->
    <update id="decrementCommentCount">
        UPDATE hottalk_post 
        SET comment_count = GREATEST(comment_count - 1, 0)
        WHERE id = #{id}
    </update>

    <!-- 신고 수 증가 -->
    <update id="incrementReportCount">
        UPDATE hottalk_post 
        SET reports = reports + 1
        WHERE id = #{id}
    </update>

    <!-- 게시글 삭제 (논리적 삭제) -->
    <update id="deleteHpost">
        UPDATE hottalk_post 
        SET is_deleted = 1
        WHERE id = #{id}
    </update>

    <!-- 전체 게시글 수 조회 -->
    <select id="getTotalHpostCount" resultType="int">
        SELECT COUNT(*)
        FROM hottalk_post 
        WHERE is_deleted = 0
    </select>

    <!-- 카테고리별 게시글 수 조회 -->
    <select id="getHpostCountByCategory" resultType="int">
        SELECT COUNT(*)
        FROM hottalk_post 
        WHERE category_id = #{categoryId} AND is_deleted = 0
    </select>

    <!-- 검색 -->
    <select id="searchHposts" resultMap="HpostResultMap">
        SELECT id, category_id, userid, userip, title, content, photo1, photo2, photo3,
               views, likes, dislikes, created_at, nickname, passwd, reports, is_deleted
        FROM hottalk_post 
        WHERE is_deleted = 0
        <choose>
            <when test="searchType == 'title'">
                AND title LIKE CONCAT('%', #{keyword}, '%')
            </when>
            <when test="searchType == 'content'">
                AND content LIKE CONCAT('%', #{keyword}, '%')
            </when>
            <when test="searchType == 'author'">
                AND nickname LIKE CONCAT('%', #{keyword}, '%')
            </when>
            <otherwise>
                AND (title LIKE CONCAT('%', #{keyword}, '%') 
                     OR content LIKE CONCAT('%', #{keyword}, '%')
                     OR nickname LIKE CONCAT('%', #{keyword}, '%'))
            </otherwise>
        </choose>
        ORDER BY created_at DESC
        LIMIT #{offset}, #{limit}
    </select>

</mapper>
