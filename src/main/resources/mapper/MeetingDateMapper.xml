<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wherehot.spring.mapper.MeetingDateMapper">

    <!-- MeetingDate ResultMap -->
    <resultMap id="MeetingDateResultMap" type="com.wherehot.spring.entity.MeetingDate">
        <id property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="authorId" column="author_id"/>
        <result property="authorNickname" column="author_nickname"/>
        <result property="meetingType" column="meeting_type"/>
        <result property="gender" column="gender"/>
        <result property="ageRange" column="age_range"/>
        <result property="location" column="location"/>
        <result property="meetingDate" column="meeting_date"/>
        <result property="capacity" column="capacity"/>
        <result property="currentParticipants" column="current_participants"/>
        <result property="viewCount" column="view_count"/>
        <result property="likeCount" column="like_count"/>
        <result property="status" column="status"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <!-- MeetingDateWish ResultMap -->
    <resultMap id="MeetingDateWishResultMap" type="com.wherehot.spring.entity.MeetingDateWish">
        <id property="id" column="id"/>
        <result property="userId" column="user_id"/>
        <result property="meetingDateId" column="meeting_date_id"/>
        <result property="createdAt" column="created_at"/>
        <!-- 미팅/데이트 정보 -->
        <result property="meetingTitle" column="meeting_title"/>
        <result property="meetingLocation" column="meeting_location"/>
        <result property="meetingDate" column="meeting_date"/>
        <result property="meetingStatus" column="meeting_status"/>
    </resultMap>

    <!-- 기본 SELECT 절 -->
    <sql id="selectMeetingDateColumns">
        SELECT md.*, m.nickname as author_nickname
        FROM meeting_date md
        LEFT JOIN member m ON md.author_id = m.userid
    </sql>

    <!-- 모든 미팅/데이트 조회 (페이징) -->
    <select id="findAll" resultMap="MeetingDateResultMap">
        <include refid="selectMeetingDateColumns"/>
        ORDER BY md.created_at DESC
        LIMIT #{offset}, #{size}
    </select>

    <!-- ID로 미팅/데이트 조회 -->
    <select id="findById" parameterType="int" resultMap="MeetingDateResultMap">
        <include refid="selectMeetingDateColumns"/>
        WHERE md.id = #{id}
    </select>

    <!-- 타입별 미팅/데이트 조회 -->
    <select id="findByMeetingType" resultMap="MeetingDateResultMap">
        <include refid="selectMeetingDateColumns"/>
        WHERE md.meeting_type = #{meetingType}
        AND md.status != 'DELETED'
        ORDER BY md.created_at DESC
        LIMIT #{offset}, #{size}
    </select>

    <!-- 성별별 미팅/데이트 조회 -->
    <select id="findByGender" resultMap="MeetingDateResultMap">
        <include refid="selectMeetingDateColumns"/>
        WHERE md.gender = #{gender}
        AND md.status != 'DELETED'
        ORDER BY md.created_at DESC
        LIMIT #{offset}, #{size}
    </select>

    <!-- 지역별 미팅/데이트 조회 -->
    <select id="findByLocation" resultMap="MeetingDateResultMap">
        <include refid="selectMeetingDateColumns"/>
        WHERE md.location LIKE CONCAT('%', #{location}, '%')
        AND md.status != 'DELETED'
        ORDER BY md.created_at DESC
        LIMIT #{offset}, #{size}
    </select>

    <!-- 작성자별 미팅/데이트 조회 -->
    <select id="findByAuthorId" resultMap="MeetingDateResultMap">
        <include refid="selectMeetingDateColumns"/>
        WHERE md.author_id = #{authorId}
        AND md.status != 'DELETED'
        ORDER BY md.created_at DESC
        LIMIT #{offset}, #{size}
    </select>

    <!-- 모집중인 미팅/데이트 조회 -->
    <select id="findRecruiting" resultMap="MeetingDateResultMap">
        <include refid="selectMeetingDateColumns"/>
        WHERE md.status = 'RECRUITING'
        AND md.current_participants &lt; md.capacity
        ORDER BY md.created_at DESC
        LIMIT #{offset}, #{size}
    </select>

    <!-- 미팅/데이트 검색 -->
    <select id="searchMeetingDates" resultMap="MeetingDateResultMap">
        <include refid="selectMeetingDateColumns"/>
        WHERE (md.title LIKE CONCAT('%', #{keyword}, '%')
        OR md.content LIKE CONCAT('%', #{keyword}, '%')
        OR md.location LIKE CONCAT('%', #{keyword}, '%'))
        AND md.status != 'DELETED'
        ORDER BY md.created_at DESC
        LIMIT #{offset}, #{size}
    </select>

    <!-- 최신 미팅/데이트 조회 -->
    <select id="findRecent" parameterType="int" resultMap="MeetingDateResultMap">
        <include refid="selectMeetingDateColumns"/>
        WHERE md.status != 'DELETED'
        ORDER BY md.created_at DESC
        LIMIT #{limit}
    </select>

    <!-- 인기 미팅/데이트 조회 -->
    <select id="findPopular" parameterType="int" resultMap="MeetingDateResultMap">
        <include refid="selectMeetingDateColumns"/>
        WHERE md.status != 'DELETED'
        ORDER BY (md.like_count * 2 + md.view_count + md.current_participants) DESC, md.created_at DESC
        LIMIT #{limit}
    </select>

    <!-- 미팅/데이트 등록 -->
    <insert id="insertMeetingDate" parameterType="com.wherehot.spring.entity.MeetingDate" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO meeting_date (
            title,
            content,
            author_id,
            meeting_type,
            gender,
            age_range,
            location,
            meeting_date,
            capacity,
            current_participants,
            view_count,
            like_count,
            status,
            created_at,
            updated_at
        ) VALUES (
            #{title},
            #{content},
            #{authorId},
            #{meetingType},
            #{gender},
            #{ageRange},
            #{location},
            #{meetingDate},
            #{capacity},
            #{currentParticipants, jdbcType=INTEGER},
            #{viewCount, jdbcType=INTEGER},
            #{likeCount, jdbcType=INTEGER},
            #{status},
            #{createdAt},
            #{updatedAt}
        )
    </insert>

    <!-- 미팅/데이트 수정 -->
    <update id="updateMeetingDate" parameterType="com.wherehot.spring.entity.MeetingDate">
        UPDATE meeting_date
        SET 
            title = #{title},
            content = #{content},
            meeting_type = #{meetingType},
            gender = #{gender},
            age_range = #{ageRange},
            location = #{location},
            meeting_date = #{meetingDate},
            capacity = #{capacity},
            updated_at = #{updatedAt}
        WHERE id = #{id}
    </update>

    <!-- 미팅/데이트 삭제 -->
    <delete id="deleteMeetingDate" parameterType="int">
        DELETE FROM meeting_date WHERE id = #{id}
    </delete>

    <!-- 조회수 증가 -->
    <update id="updateViewCount" parameterType="int">
        UPDATE meeting_date
        SET view_count = view_count + 1
        WHERE id = #{id}
    </update>

    <!-- 좋아요 수 증가 -->
    <update id="updateLikeCount" parameterType="int">
        UPDATE meeting_date
        SET like_count = like_count + 1
        WHERE id = #{id}
    </update>

    <!-- 참가자 수 변경 -->
    <update id="updateParticipantCount">
        UPDATE meeting_date
        SET current_participants = current_participants + #{change}
        WHERE id = #{id}
        AND current_participants + #{change} >= 0
        AND current_participants + #{change} &lt;= capacity
    </update>

    <!-- 상태 변경 -->
    <update id="updateStatus">
        UPDATE meeting_date
        SET status = #{status}
        WHERE id = #{id}
    </update>

    <!-- 전체 미팅/데이트 수 조회 -->
    <select id="countAll" resultType="int">
        SELECT COUNT(*) FROM meeting_date WHERE status != 'DELETED'
    </select>

    <!-- 모집중인 미팅/데이트 수 조회 -->
    <select id="countRecruiting" resultType="int">
        SELECT COUNT(*)
        FROM meeting_date
        WHERE status = 'RECRUITING'
        AND current_participants &lt; capacity
    </select>

    <!-- 검색 결과 수 조회 -->
    <select id="countSearchResults" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM meeting_date
        WHERE (title LIKE CONCAT('%', #{keyword}, '%')
        OR content LIKE CONCAT('%', #{keyword}, '%')
        OR location LIKE CONCAT('%', #{keyword}, '%'))
        AND status != 'DELETED'
    </select>

    <!-- 작성자별 미팅/데이트 수 조회 -->
    <select id="countByAuthorId" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM meeting_date
        WHERE author_id = #{authorId}
        AND status != 'DELETED'
    </select>

    <!-- MeetingDateWish 관련 쿼리 -->

    <!-- 미팅/데이트 위시 등록 -->
    <insert id="insertMeetingDateWish" parameterType="com.wherehot.spring.entity.MeetingDateWish" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO meeting_date_wish (
            user_id,
            meeting_date_id,
            created_at
        ) VALUES (
            #{userId},
            #{meetingDateId},
            #{createdAt}
        )
    </insert>

    <!-- 미팅/데이트 위시 삭제 -->
    <delete id="deleteMeetingDateWish" parameterType="int">
        DELETE FROM meeting_date_wish WHERE id = #{id}
    </delete>

    <!-- 사용자와 미팅으로 위시 삭제 -->
    <delete id="deleteMeetingDateWishByUserAndMeeting">
        DELETE FROM meeting_date_wish
        WHERE user_id = #{userId}
        AND meeting_date_id = #{meetingDateId}
    </delete>

    <!-- 사용자별 위시리스트 조회 -->
    <select id="findWishListByUserId" resultMap="MeetingDateWishResultMap">
        SELECT w.*,
               md.title as meeting_title,
               md.location as meeting_location,
               md.meeting_date,
               md.status as meeting_status
        FROM meeting_date_wish w
        LEFT JOIN meeting_date md ON w.meeting_date_id = md.id
        WHERE w.user_id = #{userId}
        ORDER BY w.created_at DESC
        LIMIT #{offset}, #{size}
    </select>

    <!-- 사용자별 위시 수 조회 -->
    <select id="countWishByUserId" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM meeting_date_wish
        WHERE user_id = #{userId}
    </select>

    <!-- 미팅/데이트별 위시 수 조회 -->
    <select id="countWishByMeetingDateId" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM meeting_date_wish
        WHERE meeting_date_id = #{meetingDateId}
    </select>

    <!-- 위시 존재 여부 확인 -->
    <select id="existsWishByUserAndMeeting" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM meeting_date_wish
        WHERE user_id = #{userId}
        AND meeting_date_id = #{meetingDateId}
    </select>

</mapper>
