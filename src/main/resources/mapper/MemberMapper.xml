<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wherehot.spring.mapper.MemberMapper">

    <!-- Result Map 정의 -->
    <resultMap id="memberResultMap" type="com.wherehot.spring.entity.Member">
        <id property="userid" column="userid"/>
        <result property="passwd" column="passwd"/>
        <result property="name" column="name"/>
        <result property="nickname" column="nickname"/>
        <result property="email" column="email"/>
        <result property="phone" column="phone"/>
        <result property="birth" column="birth"/>
        <result property="gender" column="gender"/>
        <result property="provider" column="provider"/>
        <result property="status" column="status"/>
        <result property="regdate" column="regdate"/>
        <result property="updateDate" column="update_date"/>
    </resultMap>

    <!-- 공통 SQL 조각들 -->
    <sql id="memberColumns">
        userid, passwd, name, nickname, email, phone, birth, gender, 
        provider, status, regdate, update_date
    </sql>

    <sql id="memberColumnsWithoutPassword">
        userid, name, nickname, email, phone, birth, gender, 
        provider, status, regdate, update_date
    </sql>

    <!-- 회원 정보 조회 (ID로) -->
    <select id="findByUserid" parameterType="string" resultMap="memberResultMap">
        SELECT <include refid="memberColumns"/>
        FROM member 
        WHERE userid = #{userid}
    </select>

    <!-- 회원 정보 조회 (이메일로) -->
    <select id="findByEmail" parameterType="string" resultMap="memberResultMap">
        SELECT <include refid="memberColumns"/>
        FROM member 
        WHERE email = #{email}
    </select>

    <!-- 회원 정보 조회 (닉네임으로) -->
    <select id="findByNickname" parameterType="string" resultMap="memberResultMap">
        SELECT <include refid="memberColumns"/>
        FROM member 
        WHERE nickname = #{nickname}
    </select>

    <!-- 아이디 중복 체크 -->
    <select id="existsByUserid" parameterType="string" resultType="boolean">
        SELECT COUNT(*) > 0 
        FROM member 
        WHERE userid = #{userid}
    </select>

    <!-- 이메일 중복 체크 -->
    <select id="existsByEmail" parameterType="string" resultType="boolean">
        SELECT COUNT(*) > 0 
        FROM member 
        WHERE email = #{email}
    </select>

    <!-- 닉네임 중복 체크 -->
    <select id="existsByNickname" parameterType="string" resultType="boolean">
        SELECT COUNT(*) > 0 
        FROM member 
        WHERE nickname = #{nickname}
    </select>

    <!-- 회원 등록 -->
    <insert id="insertMember" parameterType="com.wherehot.spring.entity.Member">
        INSERT INTO member (
            userid, passwd, name, nickname, email, phone, birth, gender, 
            provider, status, regdate, update_date
        ) VALUES (
            #{userid}, 
            #{passwd}, 
            #{name}, 
            #{nickname}, 
            #{email}, 
            #{phone}, 
            #{birth}, 
            #{gender}, 
            #{provider}, 
            #{status}, 
            #{regdate}, 
            #{updateDate}
        )
    </insert>

    <!-- 회원 정보 수정 -->
    <update id="updateMember" parameterType="com.wherehot.spring.entity.Member">
        UPDATE member 
        SET 
            name = #{name},
            nickname = #{nickname},
            email = #{email},
            phone = #{phone},
            birth = #{birth},
            gender = #{gender},
            update_date = #{updateDate}
        WHERE userid = #{userid}
    </update>

    <!-- 비밀번호 변경 -->
    <update id="updatePassword">
        UPDATE member 
        SET 
            passwd = #{passwd}, 
            update_date = #{updateDate} 
        WHERE userid = #{userid}
    </update>

    <!-- 로그인 정보 업데이트 - 해당 컬럼이 없으므로 업데이트만 -->
    <update id="updateLoginInfo" parameterType="com.wherehot.spring.entity.Member">
        UPDATE member 
        SET 
            update_date = #{updateDate}
        WHERE userid = #{userid}
    </update>

    <!-- 회원 상태 변경 -->
    <update id="updateStatus">
        UPDATE member 
        SET 
            status = #{status}, 
            update_date = #{updateDate} 
        WHERE userid = #{userid}
    </update>

    <!-- 회원 삭제 (탈퇴 처리) -->
    <update id="deleteMember">
        UPDATE member 
        SET 
            status = '탈퇴', 
            update_date = #{updateDate} 
        WHERE userid = #{userid}
    </update>

    <!-- 전체 회원 목록 조회 (관리자용) -->
    <select id="findAllMembers" resultMap="memberResultMap">
        SELECT <include refid="memberColumnsWithoutPassword"/>
        FROM member 
        WHERE status != '탈퇴' 
        ORDER BY regdate DESC 
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 회원 수 조회 -->
    <select id="countMembers" resultType="int">
        SELECT COUNT(*) 
        FROM member 
        WHERE status != '탈퇴'
    </select>

    <!-- 활성 회원 수 조회 -->
    <select id="countActiveMembers" resultType="int">
        SELECT COUNT(*) 
        FROM member 
        WHERE status = '정상'
    </select>

    <!-- 소셜 로그인 회원 조회 -->
    <select id="findByProvider" parameterType="string" resultMap="memberResultMap">
        SELECT <include refid="memberColumnsWithoutPassword"/>
        FROM member 
        WHERE provider = #{provider} 
        ORDER BY regdate DESC
    </select>

    <!-- 회원 검색 (동적 쿼리) -->
    <select id="searchMembers" resultMap="memberResultMap">
        SELECT <include refid="memberColumnsWithoutPassword"/>
        FROM member 
        WHERE status != '탈퇴'
        <if test="keyword != null and keyword != ''">
            AND (
                nickname LIKE CONCAT('%', #{keyword}, '%') 
                OR email LIKE CONCAT('%', #{keyword}, '%')
                OR name LIKE CONCAT('%', #{keyword}, '%')
            )
        </if>
        <if test="provider != null and provider != ''">
            AND provider = #{provider}
        </if>
        <if test="status != null and status != ''">
            AND status = #{status}
        </if>
        ORDER BY regdate DESC 
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 회원 검색 결과 수 -->
    <select id="countSearchMembers" resultType="int">
        SELECT COUNT(*) 
        FROM member 
        WHERE status != '탈퇴'
        <if test="keyword != null and keyword != ''">
            AND (
                nickname LIKE CONCAT('%', #{keyword}, '%') 
                OR email LIKE CONCAT('%', #{keyword}, '%')
                OR name LIKE CONCAT('%', #{keyword}, '%')
            )
        </if>
        <if test="provider != null and provider != ''">
            AND provider = #{provider}
        </if>
        <if test="status != null and status != ''">
            AND status = #{status}
        </if>
    </select>

    <!-- 프로필 이미지 업데이트 - 해당 컬럼이 없으므로 제거 -->
    <!-- 
    <update id="updateProfileImage">
        UPDATE member 
        SET 
            update_date = #{update_date} 
        WHERE userid = #{userid}
    </update>
    -->

    <!-- 최근 가입한 회원 조회 -->
    <select id="findRecentMembers" resultMap="memberResultMap">
        SELECT <include refid="memberColumnsWithoutPassword"/>
        FROM member 
        WHERE status = '정상' 
        ORDER BY regdate DESC 
        LIMIT #{limit}
    </select>

    <!-- 최근 로그인한 회원 조회 -->
    <select id="findRecentLoginMembers" resultMap="memberResultMap">
        SELECT <include refid="memberColumnsWithoutPassword"/>
        FROM member 
        WHERE status = '정상' 
        AND last_login_at IS NOT NULL
        ORDER BY last_login_at DESC 
        LIMIT #{limit}
    </select>

    <!-- 일정 기간 동안 로그인하지 않은 휴면 회원 조회 -->
    <select id="findDormantMembers" resultMap="memberResultMap">
        SELECT <include refid="memberColumnsWithoutPassword"/>
        FROM member 
        WHERE status = '정상' 
        AND (
            last_login_at IS NULL 
            OR last_login_at &lt; DATE_SUB(NOW(), INTERVAL #{days} DAY)
        )
        ORDER BY regdate DESC 
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 휴면 회원 수 조회 -->
    <select id="countDormantMembers" resultType="int">
        SELECT COUNT(*) 
        FROM member 
        WHERE status = '정상' 
        AND (
            last_login_at IS NULL 
            OR last_login_at &lt; DATE_SUB(NOW(), INTERVAL #{days} DAY)
        )
    </select>

    <!-- 생일인 회원 조회 (마케팅용) -->
    <select id="findBirthdayMembers" resultMap="memberResultMap">
        SELECT <include refid="memberColumnsWithoutPassword"/>
        FROM member 
        WHERE status = '정상' 
        AND birth IS NOT NULL
        AND DATE_FORMAT(birth, '%m-%d') = DATE_FORMAT(NOW(), '%m-%d')
        ORDER BY nickname
    </select>

    <!-- 통계용 쿼리들 -->
    
    <!-- 월별 가입자 수 -->
    <select id="getMemberStatsByMonth" resultType="map">
        SELECT 
            DATE_FORMAT(regdate, '%Y-%m') as month,
            COUNT(*) as count
        FROM member 
        WHERE status != '탈퇴' 
        AND regdate >= DATE_SUB(NOW(), INTERVAL 12 MONTH)
        GROUP BY DATE_FORMAT(regdate, '%Y-%m')
        ORDER BY month DESC
    </select>

    <!-- 제공자별 회원 수 -->
    <select id="getMemberStatsByProvider" resultType="map">
        SELECT 
            provider,
            COUNT(*) as count
        FROM member 
        WHERE status != '탈퇴' 
        GROUP BY provider
        ORDER BY count DESC
    </select>

    <!-- 성별 통계 -->
    <select id="getMemberStatsByGender" resultType="map">
        SELECT 
            CASE 
                WHEN gender = 'M' THEN '남성'
                WHEN gender = 'F' THEN '여성'
                ELSE '미지정'
            END as gender,
            COUNT(*) as count
        FROM member 
        WHERE status != '탈퇴' 
        GROUP BY gender
        ORDER BY count DESC
    </select>

    <!-- 연령대별 통계 -->
    <select id="getMemberStatsByAge" resultType="map">
        SELECT 
            CASE 
                WHEN YEAR(NOW()) - YEAR(birth) BETWEEN 10 AND 19 THEN '10대'
                WHEN YEAR(NOW()) - YEAR(birth) BETWEEN 20 AND 29 THEN '20대'
                WHEN YEAR(NOW()) - YEAR(birth) BETWEEN 30 AND 39 THEN '30대'
                WHEN YEAR(NOW()) - YEAR(birth) BETWEEN 40 AND 49 THEN '40대'
                WHEN YEAR(NOW()) - YEAR(birth) BETWEEN 50 AND 59 THEN '50대'
                WHEN YEAR(NOW()) - YEAR(birth) >= 60 THEN '60대 이상'
                ELSE '미지정'
            END as ageGroup,
            COUNT(*) as count
        FROM member 
        WHERE status != '탈퇴' 
        GROUP BY ageGroup
        ORDER BY count DESC
    </select>

</mapper>
