<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wherehot.spring.mapper.MypageMapper">

    <!-- 사용자 위시리스트 조회 -->
    <select id="getUserWishlist" resultType="map">
        SELECT 
            w.id,
            w.userid,
            w.place_id,
            w.wish_date,
            CASE WHEN w.personal_note IS NULL THEN '' ELSE w.personal_note END as personal_note,
            h.name as hotplace_name,
            h.address as hotplace_address,
            h.category_id as hotplace_category_id,
            pc.name as category_name
        FROM wishlist w
        LEFT JOIN hotplace_info h ON w.place_id = h.id
        LEFT JOIN place_category pc ON h.category_id = pc.id
        WHERE w.userid = #{userid}
        ORDER BY w.wish_date DESC
        LIMIT #{offset}, #{size}
    </select>

    <!-- 사용자 위시리스트 개수 조회 -->
    <select id="getUserWishlistCount" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM wishlist
        WHERE userid = #{userid}
    </select>

    <!-- 사용자가 작성한 게시글 조회 (전체 - course + hottalk) -->
    <select id="getUserPosts" resultType="map">
        SELECT 
            c.id,
            c.title,
            c.summary as content,
            c.user_id as userid,
            c.created_at as regdate,
            c.view_count,
            c.like_count,
            c.dislike_count,
            c.nickname as author_nickname,
            'course' as post_type,
            (SELECT COUNT(*) FROM course_comment WHERE course_id = c.id) as comment_count
        FROM course c
        WHERE c.user_id = #{userid} AND c.is_deleted = 0
        
        UNION ALL
        
        SELECT 
            h.id,
            h.title,
            h.content,
            h.userid,
            h.created_at as regdate,
            h.views as view_count,
            h.likes as like_count,
            h.dislikes as dislike_count,
            h.nickname as author_nickname,
            'hottalk' as post_type,
            (SELECT COUNT(*) FROM hottalk_comment WHERE post_id = h.id) as comment_count
        FROM hottalk_post h
        WHERE h.userid = #{userid}
        
        ORDER BY regdate DESC
        LIMIT #{offset}, #{size}
    </select>
    
    <!-- 사용자가 작성한 course 게시글 조회 -->
    <select id="getUserCoursePosts" resultType="map">
        SELECT 
            c.id,
            c.title,
            c.summary as content,
            c.user_id as userid,
            c.created_at as regdate,
            c.view_count,
            c.like_count,
            c.dislike_count,
            c.nickname as author_nickname,
            'course' as post_type,
            (SELECT COUNT(*) FROM course_comment WHERE course_id = c.id) as comment_count
        FROM course c
        WHERE c.user_id = #{userid} AND c.is_deleted = 0
        ORDER BY c.created_at DESC
        LIMIT #{offset}, #{size}
    </select>
    
    <!-- 사용자가 작성한 hottalk 게시글 조회 -->
    <select id="getUserHottalkPosts" resultType="map">
        SELECT 
            h.id,
            h.title,
            h.content,
            h.userid,
            h.created_at as regdate,
            h.views as view_count,
            h.likes as like_count,
            h.dislikes as dislike_count,
            h.nickname as author_nickname,
            'hottalk' as post_type,
            (SELECT COUNT(*) FROM hottalk_comment WHERE post_id = h.id) as comment_count
        FROM hottalk_post h
        WHERE h.userid = #{userid}
        ORDER BY h.created_at DESC
        LIMIT #{offset}, #{size}
    </select>

    <!-- 사용자가 작성한 게시글 개수 조회 -->
    <select id="getUserPostsCount" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM hottalk_post
        WHERE userid = #{userid}
    </select>

    <!-- 사용자가 작성한 course 게시글 개수 조회 -->
    <select id="getUserCourseCount" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM course
        WHERE user_id = #{userid}
        AND is_deleted = 0
    </select>

    <!-- 사용자가 작성한 hpost 게시글 개수 조회 -->
    <select id="getUserHpostCount" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM hottalk_post
        WHERE userid = #{userid}
    </select>

    <!-- 사용자가 작성한 댓글 조회 -->
    <select id="getUserComments" resultType="map">
        SELECT 
            hc.id,
            hc.post_id,
            hc.content,
            hc.id_address as userid,
            hc.created_at as regdate,
            hc.likes as like_count,
            hc.dislikes as dislike_count,
            h.title as post_title,
            hc.nickname as author_nickname
        FROM hottalk_comment hc
        LEFT JOIN hottalk_post h ON hc.post_id = h.id
        WHERE hc.id_address = #{userid}
        ORDER BY hc.created_at DESC
        LIMIT #{offset}, #{size}
    </select>

    <!-- 사용자가 작성한 댓글 개수 조회 -->
    <select id="getUserCommentsCount" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM hottalk_comment
        WHERE id_address = #{userid}
    </select>

    <!-- 사용자 정보 조회 -->
    <select id="getUserInfo" parameterType="string" resultType="com.wherehot.spring.entity.Member">
        SELECT 
            userid,
            nickname,
            email,
            provider,
            regdate
        FROM member
        WHERE userid = #{userid}
    </select>

    <!-- 사용자 프로필 정보 수정 -->
    <update id="updateProfile" parameterType="com.wherehot.spring.entity.Member">
        UPDATE member 
        SET 
            nickname = #{nickname},
            update_date = NOW()
        WHERE userid = #{userid}
    </update>

    <!-- 사용자 비밀번호 변경 -->
    <update id="updatePassword">
        UPDATE member 
        SET 
            passwd = #{password},
            update_date = NOW()
        WHERE userid = #{userid}
    </update>

    <!-- 사용자 상태 변경 -->
    <update id="updateMemberStatus">
        UPDATE member 
        SET 
            status = #{status},
            update_date = NOW()
        WHERE userid = #{userid}
    </update>
    
    <!-- 찜 해제 -->
    <delete id="removeWish">
        DELETE FROM wishlist 
        WHERE id = #{wishId} 
        AND userid = #{userid}
    </delete>
    
    <!-- 사용자 MD 찜 목록 조회 -->
    <select id="getMdWishList" resultType="map">
        SELECT 
            mw.wish_id as wishId,
            mw.md_id as mdId,
            mw.userid,
            mw.created_at as wishDate,
            mi.md_name as mdName,
            p.name as placeName,
            p.address as placeAddress,
            mi.contact,
            mi.description,
            mi.photo,
            mi.created_at as createdAt,
            mi.is_visible
        FROM md_wish mw
        LEFT JOIN md_info mi ON mw.md_id = mi.md_id
        LEFT JOIN hotplace_info p ON mi.place_id = p.id
        WHERE mw.userid = #{userid} AND mi.is_visible = 1
        ORDER BY mw.created_at DESC
        LIMIT #{offset}, #{size}
    </select>
    
    <!-- 사용자 MD 찜 목록 개수 조회 -->
    <select id="getMdWishListCount" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM md_wish mw
        LEFT JOIN md_info mi ON mw.md_id = mi.md_id
        LEFT JOIN hotplace_info p ON mi.place_id = p.id
        WHERE mw.userid = #{userid} AND mi.is_visible = 1
    </select>
    
    <!-- MD 찜 해제 -->
    <delete id="removeMdWish">
        DELETE FROM md_wish 
        WHERE wish_id = #{wishId} 
        AND userid = #{userid}
    </delete>

</mapper>
