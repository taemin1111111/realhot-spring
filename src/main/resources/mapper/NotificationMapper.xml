<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wherehot.spring.mapper.NotificationMapper">

    <!-- 결과 매핑 -->
    <resultMap id="NotificationResultMap" type="com.wherehot.spring.entity.Notification">
        <id property="notificationId" column="notification_id"/>
        <result property="userid" column="userid"/>
        <result property="message" column="message"/>
        <result property="type" column="type"/>
        <result property="isRead" column="is_read"/>
        <result property="createdAt" column="created_at"/>
        <result property="readAt" column="read_at"/>
    </resultMap>

    <!-- 알림 생성 -->
    <insert id="insertNotification" parameterType="com.wherehot.spring.entity.Notification" useGeneratedKeys="true" keyProperty="notificationId">
        INSERT INTO notification (
            userid, 
            message, 
            type, 
            is_read, 
            created_at
        ) VALUES (
            #{userid}, 
            #{message}, 
            #{type}, 
            #{isRead}, 
            #{createdAt}
        )
    </insert>

    <!-- 사용자별 알림 목록 조회 (최신순) -->
    <select id="selectNotificationsByUserid" resultMap="NotificationResultMap">
        SELECT 
            notification_id,
            userid,
            message,
            type,
            is_read,
            created_at,
            read_at
        FROM notification 
        WHERE userid = #{userid}
        ORDER BY created_at DESC
    </select>

    <!-- 사용자의 읽지 않은 알림 개수 조회 -->
    <select id="selectUnreadCountByUserid" resultType="int">
        SELECT COUNT(*)
        FROM notification 
        WHERE userid = #{userid} AND is_read = 0
    </select>

    <!-- 알림을 읽음으로 표시 -->
    <update id="updateNotificationAsRead">
        UPDATE notification 
        SET is_read = 1, read_at = NOW()
        WHERE notification_id = #{notificationId} AND userid = #{userid}
    </update>

    <!-- 사용자의 모든 알림을 읽음으로 표시 -->
    <update id="updateAllNotificationsAsRead">
        UPDATE notification 
        SET is_read = 1, read_at = NOW()
        WHERE userid = #{userid} AND is_read = 0
    </update>

    <!-- 알림 삭제 -->
    <delete id="deleteNotification">
        DELETE FROM notification 
        WHERE notification_id = #{notificationId} AND userid = #{userid}
    </delete>

    <!-- 사용자의 모든 알림 삭제 -->
    <delete id="deleteAllNotificationsByUserid">
        DELETE FROM notification 
        WHERE userid = #{userid}
    </delete>

    <!-- 특정 알림 조회 -->
    <select id="selectNotificationById" resultMap="NotificationResultMap">
        SELECT 
            notification_id,
            userid,
            message,
            type,
            is_read,
            created_at,
            read_at
        FROM notification 
        WHERE notification_id = #{notificationId}
    </select>

</mapper>
