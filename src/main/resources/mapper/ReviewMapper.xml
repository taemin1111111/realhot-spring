<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wherehot.spring.mapper.ReviewMapper">

    <!-- Review ResultMap -->
    <resultMap id="ReviewResultMap" type="com.wherehot.spring.entity.Review">
        <id property="num" column="num"/>
        <result property="userid" column="userid"/>
        <result property="nickname" column="nickname"/>
        <result property="content" column="content"/>
        <result property="stars" column="stars"/>
        <result property="hg_id" column="hg_id"/>
        <result property="type" column="type"/>
        <result property="good" column="good"/>
        <result property="writeday" column="writeday"/>
        <result property="category_id" column="category_id"/>
        <result property="passwd" column="passwd"/>
    </resultMap>

    <!-- 기본 SELECT 절 -->
    <sql id="selectReviewColumns">
        SELECT r.num, r.userid, r.nickname, r.content, r.stars, r.hg_id, r.type, r.good, r.writeday, r.category_id, r.passwd
        FROM review r
    </sql>

    <!-- 모든 리뷰 조회 (페이징) -->
    <select id="findAll" resultMap="ReviewResultMap">
        <include refid="selectReviewColumns"/>
        ORDER BY r.writeday DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- ID로 리뷰 조회 -->
    <select id="findById" parameterType="int" resultMap="ReviewResultMap">
        <include refid="selectReviewColumns"/>
        WHERE r.num = #{id}
    </select>

    <!-- 핫플레이스별 리뷰 조회 -->
    <select id="findByHotplaceId" resultMap="ReviewResultMap">
        <include refid="selectReviewColumns"/>
        WHERE r.hg_id = #{hotplaceId}
        ORDER BY r.writeday DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 작성자별 리뷰 조회 -->
    <select id="findByAuthorId" resultMap="ReviewResultMap">
        <include refid="selectReviewColumns"/>
        WHERE r.userid = #{authorId}
        ORDER BY r.writeday DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 지역별 리뷰 조회 -->
    <select id="findByRegion" resultMap="ReviewResultMap">
        <include refid="selectReviewColumns"/>
        WHERE r.hg_id = #{region}
        ORDER BY r.writeday DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 카테고리별 리뷰 조회 -->
    <select id="findByCategoryId" resultMap="ReviewResultMap">
        <include refid="selectReviewColumns"/>
        WHERE r.category_id = #{categoryId}
        ORDER BY r.writeday DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 평점별 리뷰 조회 -->
    <select id="findByRating" resultMap="ReviewResultMap">
        <include refid="selectReviewColumns"/>
        WHERE r.stars = #{rating}
        ORDER BY r.writeday DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 추천 리뷰 조회 -->
    <select id="findRecommendedReviews" parameterType="int" resultMap="ReviewResultMap">
        <include refid="selectReviewColumns"/>
        WHERE r.good > 0
        ORDER BY r.good DESC, r.writeday DESC
        LIMIT #{limit}
    </select>

    <!-- 최신 리뷰 조회 -->
    <select id="findRecentReviews" parameterType="int" resultMap="ReviewResultMap">
        <include refid="selectReviewColumns"/>
        ORDER BY r.writeday DESC
        LIMIT #{limit}
    </select>

    <!-- 인기 리뷰 조회 -->
    <select id="findPopularReviews" parameterType="int" resultMap="ReviewResultMap">
        <include refid="selectReviewColumns"/>
        ORDER BY r.good DESC, r.writeday DESC
        LIMIT #{limit}
    </select>

    <!-- 리뷰 등록 -->
    <insert id="insertReview" parameterType="com.wherehot.spring.entity.Review" useGeneratedKeys="true" keyProperty="num">
        INSERT INTO review (
            userid,
            nickname,
            content,
            stars,
            hg_id,
            type,
            good,
            writeday,
            category_id,
            passwd
        ) VALUES (
            #{userid},
            #{nickname},
            #{content},
            #{stars},
            #{hg_id},
            #{type},
            #{good},
            #{writeday},
            #{category_id},
            #{passwd}
        )
    </insert>

    <!-- 리뷰 수정 -->
    <update id="updateReview" parameterType="com.wherehot.spring.entity.Review">
        UPDATE review
        SET 
            nickname = #{nickname},
            content = #{content},
            stars = #{stars},
            type = #{type},
            category_id = #{category_id}
        WHERE num = #{num}
    </update>

    <!-- 리뷰 삭제 -->
    <delete id="deleteReview" parameterType="int">
        DELETE FROM review WHERE num = #{id}
    </delete>

    <!-- 좋아요 수 업데이트 -->
    <update id="updateLikeCount">
        UPDATE review
        SET good = #{likeCount}
        WHERE num = #{id}
    </update>

    <!-- 추천 이력 존재 체크 (Model1 호환) -->
    <select id="checkRecommendationExists" resultType="int">
        SELECT COUNT(*)
        FROM review_recommendation
        WHERE review_id = #{reviewId} AND userid = #{userid}
    </select>

    <!-- 추천 이력 추가 (Model1 호환) -->
    <insert id="insertRecommendation">
        INSERT INTO review_recommendation (review_id, userid, created_at)
        VALUES (#{reviewId}, #{userid}, NOW())
    </insert>

    <!-- 리뷰 추천 수 증가 (Model1 호환) -->
    <update id="incrementRecommendCount">
        UPDATE review
        SET good = good + 1
        WHERE num = #{reviewId}
    </update>

    <!-- 모든 지역명 조회 (Model1 호환) -->
    <select id="findAllRegionNames" resultType="String">
        SELECT DISTINCT hg_id
        FROM review
        WHERE hg_id IS NOT NULL AND hg_id != ''
        ORDER BY hg_id
    </select>

    <!-- 리뷰가 등록된 지역 목록 조회 (place_info와 조인) -->
    <select id="findRegionsWithReviews" resultType="java.lang.String">
        SELECT DISTINCT p.dong
        FROM review r
        JOIN place_info p ON r.hg_id = p.dong
        WHERE r.hg_id IS NOT NULL AND r.hg_id != ''
        ORDER BY COUNT(r.num) DESC
        LIMIT 8
    </select>

    <!-- 인기 지역 조회 (리뷰 수 기준) -->
    <select id="findPopularRegions" resultType="java.lang.String">
        SELECT hg_id
        FROM review
        WHERE hg_id IS NOT NULL AND hg_id != ''
        GROUP BY hg_id
        ORDER BY COUNT(*) DESC
        LIMIT 8
    </select>

    <!-- 지역별 리뷰 조회 (단순, Model1 호환) -->
    <select id="findByRegionSimple" resultMap="ReviewResultMap">
        <include refid="selectReviewColumns"/>
        WHERE r.hg_id = #{region}
        ORDER BY r.writeday DESC
        LIMIT 100
    </select>

    <!-- 지역 및 카테고리별 리뷰 조회 (Model1 호환) -->
    <select id="findByRegionAndCategory" resultMap="ReviewResultMap">
        <include refid="selectReviewColumns"/>
        WHERE r.hg_id = #{region}
        <if test="category > 0">
            AND r.category_id = #{category}
        </if>
        ORDER BY r.writeday DESC
        LIMIT 100
    </select>

    <!-- 리뷰 상태 변경 -->
    <update id="updateStatus">
        UPDATE review
        SET status = #{status}
        WHERE num = #{id}
    </update>

    <!-- 추천 상태 변경 -->
    <update id="updateRecommendedStatus">
        UPDATE review
        SET is_recommended = #{isRecommended}
        WHERE num = #{id}
    </update>

    <!-- 전체 리뷰 수 조회 -->
    <select id="countAll" resultType="int">
        SELECT COUNT(*) FROM review
    </select>

    <!-- 핫플레이스별 리뷰 수 조회 -->
    <select id="countByHotplaceId" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM review
        WHERE hg_id = #{hotplaceId}
    </select>

    <!-- 작성자별 리뷰 수 조회 -->
    <select id="countByAuthorId" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM review
        WHERE userid = #{authorId}
    </select>

    <!-- 지역별 리뷰 수 조회 -->
    <select id="countByRegion" resultType="int">
        SELECT COUNT(*)
        FROM review
        WHERE hg_id = #{region}
    </select>

    <!-- 평점별 리뷰 수 조회 -->
    <select id="countByRating" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM review
        WHERE stars = #{rating}
    </select>

    <!-- 핫플레이스별 평균 평점 조회 -->
    <select id="getAverageRatingByHotplaceId" parameterType="int" resultType="double">
        SELECT AVG(stars)
        FROM review
        WHERE hg_id = #{hotplaceId}
    </select>

    <!-- 지역별 평균 평점 조회 -->
    <select id="getAverageRatingByRegion" resultType="double">
        SELECT AVG(stars)
        FROM review
        WHERE hg_id = #{region}
    </select>

    <!-- 평점별 통계 -->
    <select id="getRatingStatistics" resultType="map">
        SELECT 
            stars as rating,
            COUNT(*) as count,
            ROUND(COUNT(*) * 100.0 / (SELECT COUNT(*) FROM review), 2) as percentage
        FROM review
        GROUP BY stars
        ORDER BY stars DESC
    </select>

    <!-- 지역별 통계 -->
    <select id="getRegionStatistics" resultType="map">
        SELECT 
            hg_id as region,
            COUNT(*) as review_count,
            AVG(stars) as avg_rating,
            MAX(writeday) as latest_review_date
        FROM review
        WHERE hg_id IS NOT NULL
        GROUP BY hg_id
        ORDER BY review_count DESC
    </select>

    <!-- 카테고리별 통계 -->
    <select id="getCategoryStatistics" resultType="map">
        SELECT 
            category_id,
            COUNT(*) as review_count,
            AVG(stars) as avg_rating
        FROM review
        WHERE category_id IS NOT NULL
        GROUP BY category_id
        ORDER BY review_count DESC
    </select>

    <!-- 월별 통계 -->
    <select id="getMonthlyStatistics" resultType="map">
        SELECT 
            DATE_FORMAT(writeday, '%Y-%m') as month,
            COUNT(*) as review_count,
            AVG(stars) as avg_rating
        FROM review
        WHERE writeday >= DATE_SUB(NOW(), INTERVAL 12 MONTH)
        GROUP BY DATE_FORMAT(writeday, '%Y-%m')
        ORDER BY month DESC
    </select>

</mapper>
