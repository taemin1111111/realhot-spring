<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.wherehot.spring.mapper.VoteMapper">

    <!-- VoteNowHot ResultMap (Model1 DB 구조에 맞게) -->
    <resultMap id="VoteNowHotResultMap" type="com.wherehot.spring.entity.VoteNowHot">
        <id property="id" column="id"/>
        <result property="placeId" column="place_id"/>
        <result property="voterId" column="voter_id"/>
        <result property="congestion" column="congestion"/>
        <result property="genderRatio" column="gender_ratio"/>
        <result property="waitTime" column="wait_time"/>
        <result property="votedAt" column="voted_at"/>
        <!-- 보안 강화 컬럼들 -->
        <result property="userAgentHash" column="user_agent_hash"/>
        <result property="isVpnProxy" column="is_vpn_proxy"/>
        <result property="riskScore" column="risk_score"/>
    </resultMap>

    <!-- VoteNowHot 관련 쿼리 -->

    <!-- 현재 핫 투표 등록 (Model1 호환) -->
    <insert id="insertVoteNowHot" parameterType="com.wherehot.spring.entity.VoteNowHot">
        INSERT INTO vote_nowhot (
            place_id,
            voter_id,
            congestion,
            gender_ratio,
            wait_time,
            voted_at,
            user_agent_hash,
            is_vpn_proxy,
            risk_score
        ) VALUES (
            #{placeId},
            #{voterId},
            #{congestion},
            #{genderRatio},
            #{waitTime},
            #{votedAt},
            #{userAgentHash},
            #{isVpnProxy},
            #{riskScore}
        )
    </insert>

    <!-- 사용자와 핫플레이스로 현재 핫 투표 조회 (Model1 구조) -->
    <select id="findVoteNowHotByUserAndHotplace" resultMap="VoteNowHotResultMap">
        SELECT * FROM vote_nowhot
        WHERE voter_id = #{userId}
        AND place_id = #{hotplaceId}
        AND DATE(voted_at) = CURDATE()
    </select>

    <!-- 핫플레이스별 현재 핫 투표 조회 (Model1 구조) -->
    <select id="findVoteNowHotByHotplace" parameterType="int" resultMap="VoteNowHotResultMap">
        SELECT * FROM vote_nowhot
        WHERE place_id = #{hotplaceId}
        ORDER BY voted_at DESC
    </select>

    <!-- 현재 핫 투표 수정 (Model1 구조) -->
    <update id="updateVoteNowHot" parameterType="com.wherehot.spring.entity.VoteNowHot">
        UPDATE vote_nowhot
        SET 
            congestion = #{congestion},
            gender_ratio = #{genderRatio},
            wait_time = #{waitTime},
            voted_at = #{votedAt}
        WHERE id = #{id}
    </update>

    <!-- 현재 핫 투표 삭제 (Model1 구조) -->
    <delete id="deleteVoteNowHot" parameterType="int">
        DELETE FROM vote_nowhot WHERE id = #{id}
    </delete>

    <!-- 핫플레이스별 평균 점수 조회 (Model1에서는 투표 수로 대체) -->
    <select id="getAverageScoreByHotplace" parameterType="int" resultType="double">
        SELECT COUNT(*) * 1.0
        FROM vote_nowhot
        WHERE place_id = #{hotplaceId}
    </select>

    <!-- 핫플레이스별 현재 핫 투표 수 조회 (Model1 구조) -->
    <select id="countVoteNowHotByHotplace" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM vote_nowhot
        WHERE place_id = #{hotplaceId}
    </select>

    <!-- 지역별 인기 핫플레이스 조회 (Model1 구조) -->
    <select id="findPopularHotplacesByRegion" resultType="map">
        SELECT 
            h.id as hotplace_id,
            h.name as hotplace_name,
            h.region,
            h.sigungu,
            COUNT(v.id) as vote_count
        FROM vote_nowhot v
        JOIN hotplace_info h ON v.place_id = h.id
        WHERE h.region = #{region}
        GROUP BY h.id, h.name, h.region, h.sigungu
        ORDER BY vote_count DESC
        LIMIT #{limit}
    </select>

    <!-- 사용자가 오늘 투표한 장소 개수 조회 (JWT 토큰 기반) -->
    <select id="getTodayVotePlaceCount" resultType="int">
        SELECT COUNT(DISTINCT place_id)
        FROM vote_nowhot_log
        WHERE voter_id = #{identifier}
        AND DATE(voted_at) = CURDATE()
    </select>

    <!-- 투표 데이터 삽입 (기존 버전 - 하위 호환성) -->
    <insert id="insertVote">
        INSERT INTO vote_nowhot_log (
            place_id,
            voter_id,
            congestion,
            gender_ratio,
            wait_time,
            voted_at
        ) VALUES (
            #{placeId},
            #{identifier},
            #{congestion},
            #{genderRatio},
            #{waitTime},
            NOW()
        )
    </insert>

    <!-- 투표 데이터 삽입 (Model1 호환) -->
    <insert id="insertVoteWithIp">
        INSERT INTO vote_nowhot_log (
            place_id,
            voter_id,
            congestion,
            gender_ratio,
            wait_time,
            voted_at
        ) VALUES (
            #{placeId},
            #{identifier},
            #{congestion},
            #{genderRatio},
            #{waitTime},
            NOW()
        )
    </insert>
    
    <!-- vote_nowhot_log에만 삽입 (간단한 버전) -->
    <insert id="insertVoteNowHotLog" parameterType="com.wherehot.spring.entity.VoteNowHot">
        INSERT INTO vote_nowhot_log (
            place_id,
            voter_id,
            congestion,
            gender_ratio,
            wait_time,
            voted_at,
            user_agent_hash,
            is_vpn_proxy,
            risk_score
        ) VALUES (
            #{placeId},
            #{voterId},
            #{congestion},
            #{genderRatio},
            #{waitTime},
            #{votedAt},
            #{userAgentHash},
            #{isVpnProxy},
            #{riskScore}
        )
    </insert>

    <!-- 특정 장소의 투표 트렌드 조회 (가장 많이 투표된 옵션들) -->
    <select id="getVoteTrends" resultType="map">
        SELECT 
            (SELECT congestion FROM vote_nowhot_log WHERE place_id = #{placeId} AND congestion IS NOT NULL AND congestion != ''
             GROUP BY congestion ORDER BY COUNT(*) DESC, MAX(voted_at) DESC LIMIT 1) as congestion,
            (SELECT gender_ratio FROM vote_nowhot_log WHERE place_id = #{placeId} AND gender_ratio IS NOT NULL AND gender_ratio != ''
             GROUP BY gender_ratio ORDER BY COUNT(*) DESC, MAX(voted_at) DESC LIMIT 1) as genderRatio,
            (SELECT wait_time FROM vote_nowhot_log WHERE place_id = #{placeId} AND wait_time IS NOT NULL AND wait_time != ''
             GROUP BY wait_time ORDER BY COUNT(*) DESC, MAX(voted_at) DESC LIMIT 1) as waitTime
    </select>
    
    <!-- 특정 장소의 총 투표 수 조회 -->
    <select id="getVoteCount" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM vote_nowhot_log
        WHERE place_id = #{placeId}
    </select>

    <!-- 위시리스트 관련 쿼리 -->
    <select id="isWished" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM wish_list
        WHERE hotplace_id = #{hotplaceId} AND userid = #{userid}
    </select>

    <insert id="addWish">
        INSERT INTO wish_list (hotplace_id, userid, created_at)
        VALUES (#{hotplaceId}, #{userid}, NOW())
    </insert>

    <delete id="removeWish">
        DELETE FROM wish_list
        WHERE hotplace_id = #{hotplaceId} AND userid = #{userid}
    </delete>

    <select id="getWishCount" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM wish_list
        WHERE hotplace_id = #{hotplaceId}
    </select>

    <!-- 오늘 핫 랭킹 조회 -->
    <select id="getTodayHotRanking" resultType="map">
        SELECT 
            h.id as hotplace_id,
            h.name as hotplace_name,
            h.region,
            h.sigungu,
            COUNT(v.id) as vote_count
        FROM vote_nowhot v
        JOIN hotplace_info h ON v.place_id = h.id
        WHERE DATE(v.voted_at) = CURDATE()
        GROUP BY h.id, h.name, h.region, h.sigungu
        ORDER BY vote_count DESC
        LIMIT 10
    </select>

    <!-- ========== 지도 상세 정보용 (vote_nowhot_log 사용) ========== -->
    
    <!-- 핫플레이스별 역대 투표 조회 (지도 상세 정보용) -->
    <select id="findVoteHistoryByHotplace" parameterType="int" resultMap="VoteNowHotResultMap">
        SELECT * FROM vote_nowhot_log
        WHERE place_id = #{hotplaceId}
        ORDER BY voted_at DESC
    </select>
    
    <!-- 핫플레이스별 역대 투표 통계 (지도 상세 정보용) -->
    <select id="getVoteHistoryStats" parameterType="int" resultType="map">
        SELECT 
            COUNT(*) as total_votes,
            COUNT(DISTINCT DATE(voted_at)) as vote_days,
            COUNT(CASE WHEN congestion = '여유' THEN 1 END) as congestion_free,
            COUNT(CASE WHEN congestion = '보통' THEN 1 END) as congestion_normal,
            COUNT(CASE WHEN congestion = '복잡' THEN 1 END) as congestion_crowded,
            COUNT(CASE WHEN gender_ratio = '남성' THEN 1 END) as gender_male,
            COUNT(CASE WHEN gender_ratio = '여성' THEN 1 END) as gender_female,
            COUNT(CASE WHEN gender_ratio = '비슷' THEN 1 END) as gender_equal,
            COUNT(CASE WHEN wait_time = '즉시' THEN 1 END) as wait_immediate,
            COUNT(CASE WHEN wait_time = '5분' THEN 1 END) as wait_5min,
            COUNT(CASE WHEN wait_time = '10분' THEN 1 END) as wait_10min,
            COUNT(CASE WHEN wait_time = '20분' THEN 1 END) as wait_20min,
            COUNT(CASE WHEN wait_time = '30분이상' THEN 1 END) as wait_30min
        FROM vote_nowhot_log
        WHERE place_id = #{hotplaceId}
    </select>
    
    <!-- 핫플레이스별 역대 투표 트렌드 (지도 상세 정보용) -->
    <select id="getVoteHistoryTrends" parameterType="int" resultType="map">
        SELECT 
            (SELECT congestion FROM vote_nowhot_log WHERE place_id = #{placeId} AND congestion IS NOT NULL AND congestion != ''
             GROUP BY congestion ORDER BY COUNT(*) DESC, MAX(voted_at) DESC LIMIT 1) as most_common_congestion,
            (SELECT gender_ratio FROM vote_nowhot_log WHERE place_id = #{placeId} AND gender_ratio IS NOT NULL AND gender_ratio != ''
             GROUP BY gender_ratio ORDER BY COUNT(*) DESC, MAX(voted_at) DESC LIMIT 1) as most_common_gender,
            (SELECT wait_time FROM vote_nowhot_log WHERE place_id = #{placeId} AND wait_time IS NOT NULL AND wait_time != ''
             GROUP BY wait_time ORDER BY COUNT(*) DESC, MAX(voted_at) DESC LIMIT 1) as most_common_wait
    </select>
    
    <!-- 핫플레이스별 역대 총 투표 수 (지도 상세 정보용) -->
    <select id="getVoteHistoryCount" parameterType="int" resultType="int">
        SELECT COUNT(*)
        FROM vote_nowhot_log
        WHERE place_id = #{placeId}
    </select>

    <!-- ========== 보안 분석용 쿼리들 ========== -->
    
    <!-- User-Agent 해시별 투표 수 조회 (봇 감지용) -->
    <select id="getVoteCountByUserAgentHash" parameterType="string" resultType="int">
        SELECT COUNT(*)
        FROM vote_nowhot
        WHERE user_agent_hash = #{userAgentHash}
        AND DATE(voted_at) = CURDATE()
    </select>
    
    <!-- 의심스러운 User-Agent 해시 목록 조회 -->
    <select id="getSuspiciousUserAgentHashes" resultType="map">
        SELECT 
            user_agent_hash,
            COUNT(*) as vote_count,
            COUNT(DISTINCT voter_id) as unique_voters,
            COUNT(DISTINCT place_id) as unique_places
        FROM vote_nowhot
        WHERE DATE(voted_at) = CURDATE()
        GROUP BY user_agent_hash
        HAVING COUNT(*) > 10 OR COUNT(DISTINCT voter_id) > 5
        ORDER BY vote_count DESC
    </select>
    
    <!-- IP별 투표 패턴 분석 -->
    <select id="getVotePatternByIp" parameterType="string" resultType="map">
        SELECT 
            voter_id,
            COUNT(*) as vote_count,
            COUNT(DISTINCT place_id) as unique_places,
            MIN(voted_at) as first_vote,
            MAX(voted_at) as last_vote,
            TIMESTAMPDIFF(MINUTE, MIN(voted_at), MAX(voted_at)) as vote_duration_minutes
        FROM vote_nowhot
        WHERE voter_id = #{voterId}
        AND DATE(voted_at) = CURDATE()
        GROUP BY voter_id
    </select>

</mapper>