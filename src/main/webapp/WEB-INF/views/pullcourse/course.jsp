<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<%@ taglib prefix="fn" uri="http://java.sun.com/jsp/jstl/functions" %>

<%
    String root = request.getContextPath();
%>

<!-- ÏΩîÏä§ Ï∂îÏ≤ú Ï†ÑÏö© CSS -->
<link rel="stylesheet" href="<%=root%>/css/course.css">

<!-- ÏΩîÏä§ Ï∂îÏ≤ú Î©îÏù∏ ÌéòÏù¥ÏßÄ -->
<div class="course-hunting-container">
    
    <!-- ÏßÄÏó≠ ÌïÑÌÑ∞ -->
    <div class="course-hunting-region-filter">
        <div class="course-hunting-region-tree">
            <c:forEach var="sidoEntry" items="${regionsBySido}">
                <c:set var="sido" value="${sidoEntry.key}" />
                <c:set var="regions" value="${sidoEntry.value}" />
                
                <div class="course-hunting-sido-section">
                    <div class="course-hunting-sido-header" onclick="toggleSido('${sido}')">
                        <i class="fas fa-map-marker-alt"></i> ${sido}
                        <i class="fas fa-chevron-down course-hunting-sido-arrow" id="arrow-${sido}"></i>
                    </div>
                    
                    <div class="course-hunting-sigungu-container" id="sigungu-${sido}" style="display: none;">
                        <!-- ÏãúÍµ∞Íµ¨Î•º 5Í∞úÏî© Í∑∏Î£πÏúºÎ°ú ÎÇòÎàÑÏñ¥ ÌëúÏãú -->
                        <c:set var="sigunguEntries" value="${regionsBySigungu[sido]}" />
                        <c:set var="sigunguList" value="${sigunguEntries.entrySet()}" />
                        <c:forEach var="sigunguEntry" items="${sigunguList}" varStatus="status" step="5">
                            <!-- ÏãúÍµ∞Íµ¨ Ï†úÎ™© Ìñâ -->
                            <div class="course-hunting-sigungu-titles">
                                <c:forEach var="i" begin="0" end="4">
                                    <c:set var="currentIndex" value="${status.index + i}" />
                                    <c:if test="${currentIndex < fn:length(sigunguList)}">
                                        <c:forEach var="tempEntry" items="${sigunguList}" varStatus="tempStatus">
                                            <c:if test="${tempStatus.index == currentIndex}">
                                                <c:set var="sigungu" value="${tempEntry.key}" />
                                                <div class="course-hunting-sigungu-name" onclick="filterByRegion('${sido}', '${tempEntry.key}', '')">${sigungu}</div>
                                            </c:if>
                                        </c:forEach>
                                    </c:if>
                                </c:forEach>
                            </div>
                            
                            <!-- Îèô Î™©Î°ù Ìñâ -->
                            <div class="course-hunting-dong-list">
                                <c:forEach var="i" begin="0" end="4">
                                    <c:set var="currentIndex" value="${status.index + i}" />
                                    <c:if test="${currentIndex < fn:length(sigunguList)}">
                                        <c:forEach var="tempEntry" items="${sigunguList}" varStatus="tempStatus">
                                            <c:if test="${tempStatus.index == currentIndex}">
                                                <c:set var="sigungu" value="${tempEntry.key}" />
                                                <c:set var="dongList" value="${tempEntry.value}" />
                                                
                                                <div class="course-hunting-dong-grid">
                                                    <c:forEach var="region" items="${dongList}">
                                                        <div class="course-hunting-dong-item" onclick="filterByRegion('${sido}', '${tempEntry.key}', '${region.dong}')">
                                                            ${region.dong}
                                                        </div>
                                                    </c:forEach>
                                                </div>
                                            </c:if>
                                        </c:forEach>
                                    </c:if>
                                </c:forEach>
                            </div>
                        </c:forEach>
                    </div>
                </div>
            </c:forEach>
        </div>
    </div>
    
    <!-- ÏÉÅÎã® ÌÉ≠ Î∞è Í≥µÏú†ÌïòÍ∏∞ Î≤ÑÌäº -->
    <div class="course-hunting-header">
        <div class="course-hunting-tabs">
            <button class="course-hunting-tab-btn ${sort == 'latest' ? 'active' : ''}" onclick="changeTab('latest')">
                <i class="fas fa-clock"></i> ÏµúÏã†Í∏Ä
            </button>
            <button class="course-hunting-tab-btn ${sort == 'popular' ? 'active' : ''}" onclick="changeTab('popular')">
                <i class="fas fa-fire"></i> Ïù∏Í∏∞Í∏Ä
            </button>
        </div>
        
        <!-- ÌòÑÏû¨ ÏÑ†ÌÉùÎêú ÏßÄÏó≠ ÌëúÏãú -->
        <div class="course-hunting-current-region">
            <c:choose>
                <c:when test="${not empty param.dong and param.dong ne ''}">
                    <span class="region-badge">
                        <i class="fas fa-map-marker-alt"></i> ${param.dong} ÏΩîÏä§
                    </span>
                </c:when>
                <c:when test="${not empty param.sigungu and param.sigungu ne ''}">
                    <span class="region-badge">
                        <i class="fas fa-map-marker-alt"></i> ${param.sigungu} Ï†ÑÏ≤¥ ÏΩîÏä§
                    </span>
                </c:when>
                <c:otherwise>
                    <span class="region-badge">
                        <i class="fas fa-map-marker-alt"></i> Ï†ÑÏ≤¥ ÏΩîÏä§
                    </span>
                </c:otherwise>
            </c:choose>
        </div>
        
        <div class="course-hunting-share-btn">
            <button class="course-hunting-share-btn" onclick="showCreateForm()">
                <i class="fas fa-plus"></i> ÏΩîÏä§ Í≥µÏú†ÌïòÍ∏∞
            </button>
        </div>
    </div>
    
    <!-- ÏΩîÏä§ Î™©Î°ù -->
    <div class="course-hunting-list">
        <c:choose>
            <c:when test="${empty courseList}">
                <div class="course-hunting-no-courses">
                    <i class="fas fa-glass-cheers"></i>
                    <h3>ÏïÑÏßÅ Îì±Î°ùÎêú ÏΩîÏä§Í∞Ä ÏóÜÏäµÎãàÎã§</h3>
                    <p>Ï≤´ Î≤àÏß∏ ÏΩîÏä§Î•º Í≥µÏú†Ìï¥Î≥¥ÏÑ∏Ïöî!</p>
                </div>
            </c:when>
            <c:otherwise>
                <div class="course-hunting-grid">
                                         <c:forEach var="course" items="${courseList}">
                         <div class="course-hunting-card" onclick="goToDetail(${course.id})">
                             <!-- Ï†úÎ™© ÏÑπÏÖò -->
                             <div class="course-hunting-card-title-section">
                                 <h3 class="course-hunting-card-title">${course.title}</h3>
                             </div>
                             
                             <!-- Ïä§ÌÖù Í≤ΩÎ°ú -->
                             <div class="course-hunting-card-steps">
                                 <c:choose>
                                     <c:when test="${not empty course.courseSteps}">
                                         <c:forEach var="step" items="${course.courseSteps}" varStatus="status">
                                             <div class="course-step-line">
                                                 <span class="course-step-number">${step.stepNo}</span>
                                                 <span class="course-step-place">${step.placeName}</span>
                                             </div>
                                         </c:forEach>
                                     </c:when>
                                     <c:otherwise>
                                         <span class="course-step-info">Ïä§ÌÖù Ï†ïÎ≥¥ ÏóÜÏùå</span>
                                     </c:otherwise>
                                 </c:choose>
                             </div>
                             
                             <!-- Íµ¨Î∂ÑÏÑ† -->
                             <div class="course-hunting-card-divider"></div>
                             
                             <!-- ÏöîÏïΩ -->
                             <div class="course-hunting-card-summary-section">
                                 <p class="course-hunting-card-summary">${course.summary}</p>
                             </div>
                             
                             <!-- ÎãâÎÑ§ÏûÑ -->
                             <div class="course-hunting-card-author-section">
                                 <span class="course-hunting-card-nickname">${course.nickname}</span>
                             </div>
                             
                             <!-- ÌïòÎã® ÌÜµÍ≥Ñ -->
                             <div class="course-hunting-card-footer">
                                 <div class="course-hunting-card-stats">
                                     <span class="course-hunting-stat-item">
                                         üëÅÔ∏è ${course.viewCount}
                                     </span>
                                     <span class="course-hunting-stat-item">
                                         üëç ${course.likeCount}
                                     </span>
                                     <span class="course-hunting-stat-item">
                                         üëé ${course.dislikeCount != null ? course.dislikeCount : 0}
                                     </span>
                                     <span class="course-hunting-stat-item">
                                         üí¨ ${course.commentCount}
                                     </span>
                                 </div>

                                                                   <div class="course-hunting-card-time">
                                      <c:choose>
                                          <c:when test="${not empty course.createdAt}">
                                              <%
                                                  // ÌòÑÏû¨ ÏãúÍ∞ÑÍ≥º ÏÉùÏÑ± ÏãúÍ∞ÑÏùò Ï∞®Ïù¥Î•º Í≥ÑÏÇ∞
                                                  java.time.LocalDateTime now = java.time.LocalDateTime.now();
                                                  com.wherehot.spring.entity.Course course = (com.wherehot.spring.entity.Course) pageContext.getAttribute("course");
                                                  if (course != null && course.getCreatedAt() != null) {
                                                      long secondsDiff = java.time.Duration.between(course.getCreatedAt(), now).getSeconds();
                                                      
                                                      if (secondsDiff < 60) {
                                                          out.print("Î∞©Í∏àÏ†Ñ");
                                                      } else if (secondsDiff < 3600) {
                                                          long minutes = secondsDiff / 60;
                                                          out.print(minutes + "Î∂ÑÏ†Ñ");
                                                      } else if (secondsDiff < 86400) {
                                                          long hours = secondsDiff / 3600;
                                                          out.print(hours + "ÏãúÍ∞ÑÏ†Ñ");
                                                      } else {
                                                          long days = secondsDiff / 86400;
                                                          out.print(days + "ÏùºÏ†Ñ");
                                                      }
                                                  } else {
                                                      out.print("Î∞©Í∏àÏ†Ñ");
                                                  }
                                              %>
                                          </c:when>
                                          <c:otherwise>Î∞©Í∏àÏ†Ñ</c:otherwise>
                                      </c:choose>
                                  </div>
                             </div>
                         </div>
                     </c:forEach>
                </div>
            </c:otherwise>
        </c:choose>
    </div>
    
         <!-- ÌéòÏù¥Ïßï -->
     <c:if test="${totalCount > 12}">
         <div class="course-hunting-pagination">
             <c:set var="pageSize" value="12" />
             <c:set var="totalPages" value="${(totalCount + pageSize - 1) / pageSize}" />
             <c:set var="startPage" value="${((currentPage - 1) / 5) * 5 + 1}" />
             <c:set var="endPage" value="${startPage + 4}" />
             <c:if test="${endPage > totalPages}">
                 <c:set var="endPage" value="${totalPages}" />
             </c:if>
             
             <!-- Ïù¥Ï†Ñ ÌéòÏù¥ÏßÄ Î≤ÑÌäº -->
             <c:if test="${currentPage > 1}">
                 <a href="javascript:void(0)" onclick="changePage(${currentPage - 1})" class="course-hunting-page-btn">
                     <i class="fas fa-chevron-left"></i>
                 </a>
             </c:if>
             
             <!-- Ï≤´ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô (ÌòÑÏû¨ ÌéòÏù¥ÏßÄÍ∞Ä 6 Ïù¥ÏÉÅÏùº Îïå) -->
             <c:if test="${startPage > 1}">
                 <a href="javascript:void(0)" onclick="changePage(1)" class="course-hunting-page-btn">1</a>
                 <c:if test="${startPage > 2}">
                     <span class="course-hunting-page-dots">...</span>
                 </c:if>
             </c:if>
             
             <!-- ÌéòÏù¥ÏßÄ Î≤àÌò∏Îì§ -->
             <c:forEach begin="${startPage}" end="${endPage}" var="pageNum">
                 <c:choose>
                     <c:when test="${pageNum == currentPage}">
                         <span class="course-hunting-page-btn active">${pageNum}</span>
                     </c:when>
                     <c:otherwise>
                         <a href="javascript:void(0)" onclick="changePage(${pageNum})" class="course-hunting-page-btn">${pageNum}</a>
                     </c:otherwise>
                 </c:choose>
             </c:forEach>
             
             <!-- ÎßàÏßÄÎßâ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô (ÌòÑÏû¨ ÌéòÏù¥ÏßÄÍ∞Ä ÎßàÏßÄÎßâ 5ÌéòÏù¥ÏßÄ Ïù¥Ï†ÑÏùº Îïå) -->
             <c:if test="${endPage < totalPages}">
                 <c:if test="${endPage < totalPages - 1}">
                     <span class="course-hunting-page-dots">...</span>
                 </c:if>
                 <a href="javascript:void(0)" onclick="changePage(${totalPages})" class="course-hunting-page-btn">${totalPages}</a>
             </c:if>
             
             <!-- Îã§Ïùå ÌéòÏù¥ÏßÄ Î≤ÑÌäº -->
             <c:if test="${currentPage < totalPages}">
                 <a href="javascript:void(0)" onclick="changePage(${currentPage + 1})" class="course-hunting-page-btn">
                     <i class="fas fa-chevron-right"></i>
                 </a>
             </c:if>
         </div>
     </c:if>
</div>

<!-- ÏΩîÏä§ Í≥µÏú†ÌïòÍ∏∞ Î™®Îã¨ -->
<div id="createModal" class="course-hunting-modal">
    <div class="course-hunting-modal-content">
        <div class="course-hunting-modal-header">
            <h2><i class="fas fa-plus"></i> ÏΩîÏä§ Í≥µÏú†ÌïòÍ∏∞</h2>
            <span class="course-hunting-close" onclick="closeCreateModal()">&times;</span>
        </div>
        <div class="course-hunting-modal-body">
            <form id="courseForm">
                <div class="course-hunting-form-group">
                    <label>ÏΩîÏä§ Ï†úÎ™©</label>
                    <input type="text" id="courseTitle" name="title" required>
                </div>
                <div class="course-hunting-form-group">
                    <label>ÏΩîÏä§ ÏÑ§Î™Ö</label>
                    <textarea id="courseSummary" name="summary" rows="3" required></textarea>
                </div>
                <div class="course-hunting-form-group">
                    <label>ÏûëÏÑ±Ïûê</label>
                    <input type="text" id="courseNickname" name="nickname" required 
                           maxlength="5" placeholder="ÎãâÎÑ§ÏûÑ (5Ïûê Ïù¥Ìïò)">
                </div>
                <div class="course-hunting-form-group">
                    <label>ÎπÑÎ∞ÄÎ≤àÌò∏</label>
                    <input type="password" id="coursePassword" name="passwd_hash" 
                           maxlength="4" pattern="[0-9]{4}" placeholder="Ïà´Ïûê 4ÏûêÎ¶¨" 
                           title="Ïà´Ïûê 4ÏûêÎ¶¨Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî"
                           oninput="validatePassword(this)" onkeypress="return onlyNumbers(event)">
                </div>
                <!-- ÏÇ¨Ïö©Ïûê ID ÌûàÎì† ÌïÑÎìú (Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÏóê Îî∞Îùº ÏûêÎèô ÏÑ§Ï†ï) -->
                <input type="hidden" id="courseUserId" name="userId" value="">
                
                <div class="course-hunting-steps-container">
                    <h3>ÏΩîÏä§ Ïä§ÌÖù</h3>
                    <div id="stepsList">
                        <div class="course-hunting-step-item" data-step="1">
                            <div class="course-hunting-step-header">
                                <span class="course-hunting-step-number">1</span>
                                <button type="button" class="course-hunting-remove-step" style="display:none;">ÏÇ≠Ï†ú</button>
                            </div>
                            <div class="course-hunting-step-content">
                                <div class="hotplace-search-container">
                                    <div class="search-input-wrapper">
                                        <input type="text" placeholder="Ìï´ÌîåÎ†àÏù¥Ïä§ Í≤ÄÏÉâ..." class="course-hunting-step-place" required>
                                        <button type="button" class="search-refresh-btn" onclick="clearSearch(this)" title="Í≤ÄÏÉâ Ï¥àÍ∏∞Ìôî">
                                            <span class="refresh-icon">‚Üª</span>
                                        </button>
                                    </div>
                                    <input type="hidden" class="course-hunting-step-place-id" value="">
                                    <div class="hotplace-autocomplete" style="display: none;"></div>
                                </div>
                                <input type="file" class="course-hunting-step-photo" accept="image/*">
                                <textarea placeholder="Ïä§ÌÖù ÏÑ§Î™Ö" class="course-hunting-step-description" rows="2"></textarea>
                            </div>
                        </div>
                    </div>
                    <button type="button" class="course-hunting-add-step-btn" onclick="addStep()">
                        <i class="fas fa-plus"></i> Ïä§ÌÖù Ï∂îÍ∞Ä
                    </button>
                </div>
                
                <div class="course-hunting-form-actions">
                    <button type="submit" class="course-hunting-submit-btn">ÏΩîÏä§ Îì±Î°ù</button>
                    <button type="button" class="course-hunting-cancel-btn" onclick="closeCreateModal()">Ï∑®ÏÜå</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
let currentSort = '${sort}' || '';
let currentPage = ${currentPage} || 1;
let currentSido = '${param.sido}' || '';
let currentSigungu = '${param.sigungu}' || '';
let currentDong = '${param.dong}' || '';
let stepCount = 1;



// ÏãúÍ∞Ñ Í≥ÑÏÇ∞ Ìï®Ïàò
function calculateTimeAgo(createdAt) {
    if (!createdAt) return 'Î∞©Í∏àÏ†Ñ';
    
    const createdDate = new Date(createdAt);
    const now = new Date();
    const diffMs = now - createdDate;
    
    if (diffMs < 60000) { // 1Î∂Ñ ÎØ∏Îßå
        return 'Î∞©Í∏àÏ†Ñ';
    } else if (diffMs < 3600000) { // 1ÏãúÍ∞Ñ ÎØ∏Îßå
        const minutes = Math.floor(diffMs / 60000);
        return minutes + 'Î∂ÑÏ†Ñ';
    } else if (diffMs < 86400000) { // 24ÏãúÍ∞Ñ ÎØ∏Îßå
        const hours = Math.floor(diffMs / 3600000);
        return hours + 'ÏãúÍ∞ÑÏ†Ñ';
    } else {
        const days = Math.floor(diffMs / 86400000);
        return days + 'ÏùºÏ†Ñ';
    }
}

// ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú ÏãúÍ∞Ñ Í≥ÑÏÇ∞ Ïã§Ìñâ
document.addEventListener('DOMContentLoaded', function() {
    // ÏãúÍ∞Ñ Í≥ÑÏÇ∞
    const timeElements = document.querySelectorAll('.course-hunting-card-time');
    timeElements.forEach(function(element) {
        const createdAt = element.getAttribute('data-created-at');
        const timeTextElement = element.querySelector('.time-text');
        if (timeTextElement) {
            timeTextElement.textContent = calculateTimeAgo(createdAt);
        }
    });
    
    // Í∏∞Ï°¥ Ï¥àÍ∏∞Ìôî ÏΩîÎìúÎì§...
    const initialRemoveButton = document.querySelector('.course-hunting-remove-step');
    if (initialRemoveButton) {
        initialRemoveButton.addEventListener('click', function() {
            const stepNum = parseInt(this.closest('.course-hunting-step-item').getAttribute('data-step'));
            removeStep(stepNum);
        });
    }
    
    // Ìï´ÌîåÎ†àÏù¥Ïä§ Í≤ÄÏÉâ ÏûêÎèôÏôÑÏÑ± Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä
    setupHotplaceAutocomplete();
});

// ÌÉ≠ Î≥ÄÍ≤Ω
function changeTab(sort) {
    currentSort = sort;
    currentPage = 1;
    loadCourses();
}

// ÏãúÎèÑ ÌÜ†Í∏Ä (ÌéºÏπòÍ∏∞/Ï†ëÍ∏∞)
function toggleSido(sido) {
    const sigunguContainer = document.getElementById('sigungu-' + sido);
    const arrow = document.getElementById('arrow-' + sido);
    
    if (sigunguContainer.style.display === 'none') {
        sigunguContainer.style.display = 'block';
        arrow.classList.remove('fa-chevron-down');
        arrow.classList.add('fa-chevron-up');
    } else {
        sigunguContainer.style.display = 'none';
        arrow.classList.remove('fa-chevron-up');
        arrow.classList.add('fa-chevron-down');
    }
}

// ÏßÄÏó≠ ÌïÑÌÑ∞ÎßÅ
function filterByRegion(sido, sigungu, dong) {
    currentSido = sido;
    currentSigungu = sigungu;
    currentDong = dong;
    currentPage = 1;
    loadCourses();
}

// ÌéòÏù¥ÏßÄ Î≥ÄÍ≤Ω
function changePage(page) {
    currentPage = page;
    loadCourses();
}

// ÏΩîÏä§ Î™©Î°ù Î°úÎìú
function loadCourses() {
    let url = '<%=root%>/course?page=' + currentPage + '&sort=' + currentSort;
    if (currentSido) {
        var encodedSido = window.encodeURIComponent(currentSido);
        url += '&sido=' + encodedSido;
    }
    if (currentSigungu) {
        var encodedSigungu = window.encodeURIComponent(currentSigungu);
        url += '&sigungu=' + encodedSigungu;
    }
    if (currentDong) {
        var encodedDong = window.encodeURIComponent(currentDong);
        url += '&dong=' + encodedDong;
    }
    

    
    window.location.href = url;
}

// ÏÉÅÏÑ∏ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
function goToDetail(courseId) {
    window.location.href = '<%=root%>/course/' + courseId;
}

// JWT ÌÜ†ÌÅ∞ Í¥ÄÎ¶¨ Ìï®ÏàòÎì§
function getToken() {
    return localStorage.getItem('accessToken');
}

function getUserInfo() {
    // JWT ÌÜ†ÌÅ∞ÏóêÏÑú ÏßÅÏ†ë ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ Ï∂îÏ∂ú (localStorageÎ≥¥Îã§ Ïã†Î¢∞Ìï† Ïàò ÏûàÏùå)
    const token = localStorage.getItem('accessToken');
    if (!token) {
        return null;
    }
    
    try {
        // Base64 ÎîîÏΩîÎî© Ïãú ÌïúÍ∏Ä Ïù∏ÏΩîÎî© Î¨∏Ï†ú Ìï¥Í≤∞
        const base64Url = token.split('.')[1];
        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        const jsonPayload = decodeURIComponent(atob(base64).split('').map(function(c) {
            return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
        }).join(''));
        
        const payload = JSON.parse(jsonPayload);
        
        return {
            userid: payload.sub,
            nickname: payload.nickname,
            provider: payload.provider || 'site'
        };
    } catch (error) {
        // localStorageÏóêÏÑú Î∞±ÏóÖ Ï†ïÎ≥¥ ÌôïÏù∏
        const backupInfo = localStorage.getItem('userInfo');
        if (backupInfo) {
            try {
                const parsed = JSON.parse(backupInfo);
                return parsed;
            } catch (e) {
                console.error('Î∞±ÏóÖ Ï†ïÎ≥¥ ÌååÏã± Ïò§Î•ò:', e);
            }
        }
        return null;
    }
}

// ÎπÑÎ∞ÄÎ≤àÌò∏ ÏûÖÎ†• Í≤ÄÏ¶ù Ìï®ÏàòÎì§
function onlyNumbers(event) {
    const charCode = (event.which) ? event.which : event.keyCode;
    if (charCode > 31 && (charCode < 48 || charCode > 57)) {
        return false;
    }
    return true;
}

function validatePassword(input) {
    // Ïà´ÏûêÍ∞Ä ÏïÑÎãå Î¨∏Ïûê Ï†úÍ±∞
    input.value = input.value.replace(/[^0-9]/g, '');
    
    // 4ÏûêÎ¶¨Î°ú Ï†úÌïú
    if (input.value.length > 4) {
        input.value = input.value.slice(0, 4);
    }
    
    // 4ÏûêÎ¶¨Í∞Ä ÏïÑÎãàÎ©¥ Í≤ΩÍ≥† ÌëúÏãú
    if (input.value.length > 0 && input.value.length !== 4) {
        input.style.borderColor = '#ff6b6b';
        input.title = 'Ïà´Ïûê 4ÏûêÎ¶¨Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî';
    } else {
        input.style.borderColor = '#ddd';
        input.title = 'Ïà´Ïûê 4ÏûêÎ¶¨Î•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî';
    }
}

// ÏΩîÏä§ Í≥µÏú†ÌïòÍ∏∞ Î™®Îã¨ ÌëúÏãú
function showCreateForm() {
    document.getElementById('createModal').style.display = 'block';
    
    // Î°úÍ∑∏Ïù∏ ÏÉÅÌÉú ÌôïÏù∏ Î∞è ÏûëÏÑ±Ïûê ÌïÑÎìú ÏÑ§Ï†ï
    const userInfo = getUserInfo();
    const nicknameInput = document.getElementById('courseNickname');
    const passwordInput = document.getElementById('coursePassword');
    
    if (userInfo && userInfo.nickname) {
        // Î°úÍ∑∏Ïù∏Îêú ÏÇ¨Ïö©Ïûê: ÎãâÎÑ§ÏûÑ ÏûêÎèô ÏÑ§Ï†ï
        nicknameInput.value = userInfo.nickname;
        nicknameInput.readOnly = true;
        nicknameInput.style.backgroundColor = '#f8f9fa';
        
        // ÎπÑÎ∞ÄÎ≤àÌò∏ ÌïÑÎìúÎäî Ìï≠ÏÉÅ ÌëúÏãú (Ïà´Ïûê 4ÏûêÎ¶¨ ÏûÖÎ†•)
        passwordInput.style.display = 'block';
        passwordInput.parentElement.style.display = 'block';
        passwordInput.required = true;
        
        // ÌûàÎì† ÌïÑÎìúÏóê ÏÇ¨Ïö©Ïûê ID ÏÑ§Ï†ï
        const userIdInput = document.getElementById('courseUserId');
        if (userIdInput) {
            userIdInput.value = userInfo.userid || '';
        }
    } else {
        // ÎπÑÎ°úÍ∑∏Ïù∏ ÏÇ¨Ïö©Ïûê: ÎãâÎÑ§ÏûÑ ÏûÖÎ†• Í∞ÄÎä•, ÎπÑÎ∞ÄÎ≤àÌò∏ ÌïÑÎìú ÌëúÏãú
        nicknameInput.value = '';
        nicknameInput.readOnly = false;
        nicknameInput.style.backgroundColor = '#ffffff';
        passwordInput.style.display = 'block';
        passwordInput.parentElement.style.display = 'block';
        passwordInput.required = true;
        
        // ÌûàÎì† ÌïÑÎìú Ï¥àÍ∏∞Ìôî (ÏÑúÎ≤ÑÏóêÏÑú IP Ï£ºÏÜåÎ°ú ÏÑ§Ï†ïÎê®)
        const userIdInput = document.getElementById('courseUserId');
        if (userIdInput) {
            userIdInput.value = '';
        }
    }
}

// ÏΩîÏä§ Í≥µÏú†ÌïòÍ∏∞ Î™®Îã¨ Îã´Í∏∞
function closeCreateModal() {
    document.getElementById('createModal').style.display = 'none';
    // Î™®Îã¨ Îã´ÏùÑ Îïå Ìèº Ï¥àÍ∏∞Ìôî
    resetForm();
}

// Ìèº Ï¥àÍ∏∞Ìôî
function resetForm() {
    document.getElementById('courseForm').reset();
    
    // ÎπÑÎ∞ÄÎ≤àÌò∏ ÌïÑÎìú Ï¥àÍ∏∞Ìôî
    const passwordInput = document.getElementById('coursePassword');
    if (passwordInput) {
        passwordInput.value = '';
        passwordInput.required = false;
    }
    
    // Ïä§ÌÖùÏùÑ 1Í∞úÎ°ú Ï¥àÍ∏∞Ìôî
    const stepsList = document.getElementById('stepsList');
    stepsList.innerHTML = `
        <div class="course-hunting-step-item" data-step="1">
            <div class="course-hunting-step-header">
                <span class="course-hunting-step-number">1</span>
                <button type="button" class="course-hunting-remove-step" onclick="removeStep(1)" style="display:none;">ÏÇ≠Ï†ú</button>
            </div>
            <div class="course-hunting-step-content">
                <div class="hotplace-search-container">
                    <div class="search-input-wrapper">
                        <input type="text" placeholder="Ìï´ÌîåÎ†àÏù¥Ïä§ Í≤ÄÏÉâ..." class="course-hunting-step-place" required>
                        <button type="button" class="search-refresh-btn" onclick="clearSearch(this)" title="Í≤ÄÏÉâ Ï¥àÍ∏∞Ìôî">
                            <span class="refresh-icon">‚Üª</span>
                        </button>
                    </div>
                    <input type="hidden" class="course-hunting-step-place-id" value="">
                    <div class="hotplace-autocomplete" style="display: none;"></div>
                </div>
                <input type="file" class="course-hunting-step-photo" accept="image/*">
                <textarea placeholder="Ïä§ÌÖù ÏÑ§Î™Ö" class="course-hunting-step-description" rows="2"></textarea>
            </div>
        </div>
    `;
    
    stepCount = 1;
    updateRemoveButtons();
    
    // ÏÉàÎ°ú ÏÉùÏÑ±Îêú ÏûÖÎ†• ÌïÑÎìúÏóê ÏûêÎèôÏôÑÏÑ± ÏÑ§Ï†ï
    const newInput = document.querySelector('.course-hunting-step-place');
    if (newInput) {
        setupInputAutocomplete(newInput);
    }
}

// Ïä§ÌÖù Ï∂îÍ∞Ä
function addStep() {
    const currentSteps = document.querySelectorAll('.course-hunting-step-item').length;
    if (currentSteps >= 5) {
        alert('ÏµúÎåÄ 5Í∞úÍπåÏßÄ Ï∂îÍ∞Ä Í∞ÄÎä•Ìï©ÎãàÎã§.');
        return;
    }
    
    const newStepNumber = currentSteps + 1;
    const stepsList = document.getElementById('stepsList');
    const newStep = document.createElement('div');
    newStep.className = 'course-hunting-step-item';
    newStep.setAttribute('data-step', newStepNumber);
    
    newStep.innerHTML = `
        <div class="course-hunting-step-header">
            <span class="course-hunting-step-number">${newStepNumber}</span>
            <button type="button" class="course-hunting-remove-step">ÏÇ≠Ï†ú</button>
        </div>
                    <div class="course-hunting-step-content">
                <div class="hotplace-search-container">
                    <div class="search-input-wrapper">
                        <input type="text" placeholder="Ìï´ÌîåÎ†àÏù¥Ïä§ Í≤ÄÏÉâ..." class="course-hunting-step-place" required>
                        <button type="button" class="search-refresh-btn" onclick="clearSearch(this)" title="Í≤ÄÏÉâ Ï¥àÍ∏∞Ìôî">
                            <span class="refresh-icon">‚Üª</span>
                        </button>
                    </div>
                    <input type="hidden" class="course-hunting-step-place-id" value="">
                    <div class="hotplace-autocomplete" style="display: none;"></div>
                </div>
                <input type="file" class="course-hunting-step-photo" accept="image/*">
                <textarea placeholder="Ïä§ÌÖù ÏÑ§Î™Ö" class="course-hunting-step-description" rows="2"></textarea>
            </div>
    `;
    
    stepsList.appendChild(newStep);
    
    // ÏÇ≠Ï†ú Î≤ÑÌäºÏóê Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏßÅÏ†ë Ï∂îÍ∞Ä
    const removeButton = newStep.querySelector('.course-hunting-remove-step');
    if (removeButton) {
        removeButton.addEventListener('click', function() {
            const stepNum = parseInt(this.closest('.course-hunting-step-item').getAttribute('data-step'));
            removeStep(stepNum);
        });
    }
    
    // stepCount ÏóÖÎç∞Ïù¥Ìä∏
    stepCount = newStepNumber;
    
    // ÏÇ≠Ï†ú Î≤ÑÌäº ÌëúÏãú/Ïà®ÍπÄ Ï≤òÎ¶¨
    updateRemoveButtons();
    
    // Í∞ïÏ†úÎ°ú Î≤àÌò∏ Îã§Ïãú ÏÑ§Ï†ï
    setTimeout(() => {
        const numberElements = document.querySelectorAll('.course-hunting-step-number');
        numberElements.forEach((el, index) => {
            const stepNum = index + 1;
            el.textContent = stepNum.toString();
            el.closest('.course-hunting-step-item').setAttribute('data-step', stepNum);
        });
    }, 10);
    
    // ÎîîÎ≤ÑÍπÖÏö© Î°úÍ∑∏
    console.log('Ïä§ÌÖù Ï∂îÍ∞ÄÎê®:', newStepNumber);
    console.log('ÌòÑÏû¨ Ïä§ÌÖùÎì§:', document.querySelectorAll('.course-hunting-step-item').length);
    console.log('Ïä§ÌÖù Î≤àÌò∏Îì§:', Array.from(document.querySelectorAll('.course-hunting-step-number')).map(el => el.textContent));
    console.log('data-step ÏÜçÏÑ±Îì§:', Array.from(document.querySelectorAll('.course-hunting-step-item')).map(el => el.getAttribute('data-step')));
    
    // ÏÉàÎ°ú Ï∂îÍ∞ÄÎêú Ïä§ÌÖùÏùò Ìï´ÌîåÎ†àÏù¥Ïä§ ÏûÖÎ†• ÌïÑÎìúÏóê ÏûêÎèôÏôÑÏÑ± ÏÑ§Ï†ï
    const newInput = newStep.querySelector('.course-hunting-step-place');
    if (newInput) {
        setupInputAutocomplete(newInput);
    }
}

// Ïä§ÌÖù ÏÇ≠Ï†ú
function removeStep(stepNum) {
    console.log('ÏÇ≠Ï†ú ÏãúÎèÑ:', stepNum);
    console.log('ÌòÑÏû¨ stepCount:', stepCount);
    
    if (stepCount <= 1) {
        alert('ÏµúÏÜå 1Í∞úÏùò Ïä§ÌÖùÏùÄ ÌïÑÏöîÌï©ÎãàÎã§.');
        return;
    }
    
    // Î™®Îì† Ïä§ÌÖù ÏöîÏÜåÎ•º Í∞ÄÏ†∏ÏôÄÏÑú Ïù∏Îç±Ïä§Î°ú ÏÇ≠Ï†ú
    const stepElements = document.querySelectorAll('.course-hunting-step-item');
    const stepToRemove = stepElements[stepNum - 1]; // 0-based index
    
    console.log('ÏÇ≠Ï†úÌï† Ïä§ÌÖù ÏöîÏÜå:', stepToRemove);
    console.log('Ï¥ù Ïä§ÌÖù Ïàò:', stepElements.length);
    console.log('ÏÇ≠Ï†úÌï† Ïù∏Îç±Ïä§:', stepNum - 1);
    
    if (stepToRemove) {
        stepToRemove.remove();
        stepCount--;
        
        console.log('Ïä§ÌÖù ÏÇ≠Ï†ú ÌõÑ stepCount:', stepCount);
        
        // Ïä§ÌÖù Î≤àÌò∏ Ïû¨Ï†ïÎ†¨
        reorderSteps();
        updateRemoveButtons();
        
        console.log('ÏÇ≠Ï†ú ÏôÑÎ£å, ÎÇ®ÏùÄ Ïä§ÌÖùÎì§:', document.querySelectorAll('.course-hunting-step-item').length);
    } else {
        console.log('ÏÇ≠Ï†úÌï† Ïä§ÌÖùÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå:', stepNum);
    }
}

// Ïä§ÌÖù Î≤àÌò∏ Ïû¨Ï†ïÎ†¨
function reorderSteps() {
    const steps = document.querySelectorAll('.course-hunting-step-item');
    console.log('Ïû¨Ï†ïÎ†¨ ÏãúÏûë, Ï¥ù Ïä§ÌÖù Ïàò:', steps.length);
    
    steps.forEach((step, index) => {
        const stepNum = index + 1;
        step.setAttribute('data-step', stepNum);
        
        const numberElement = step.querySelector('.course-hunting-step-number');
        if (numberElement) {
            numberElement.textContent = stepNum;
            console.log(`Ïä§ÌÖù ${stepNum} Î≤àÌò∏ ÏÑ§Ï†ï:`, stepNum);
        }
        
        // ÏÇ≠Ï†ú Î≤ÑÌäºÏùò Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏóÖÎç∞Ïù¥Ìä∏
        const removeButton = step.querySelector('.course-hunting-remove-step');
        if (removeButton) {
            // Í∏∞Ï°¥ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï†úÍ±∞
            removeButton.replaceWith(removeButton.cloneNode(true));
            const newRemoveButton = step.querySelector('.course-hunting-remove-step');
            
            // ÏÉàÎ°úÏö¥ Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä
            newRemoveButton.addEventListener('click', function() {
                const currentStepNum = parseInt(this.closest('.course-hunting-step-item').getAttribute('data-step'));
                removeStep(currentStepNum);
            });
        }
    });
    
    console.log('Ïû¨Ï†ïÎ†¨ ÏôÑÎ£å');
    console.log('Ïû¨Ï†ïÎ†¨ ÌõÑ data-step ÏÜçÏÑ±Îì§:', Array.from(document.querySelectorAll('.course-hunting-step-item')).map(el => el.getAttribute('data-step')));
}

// ÏÇ≠Ï†ú Î≤ÑÌäº ÌëúÏãú/Ïà®ÍπÄ Ï≤òÎ¶¨
function updateRemoveButtons() {
    const removeButtons = document.querySelectorAll('.course-hunting-remove-step');
    removeButtons.forEach(btn => {
        btn.style.display = stepCount > 1 ? 'block' : 'none';
    });
    
    // stepCount ÏóÖÎç∞Ïù¥Ìä∏ (Ïã§Ï†ú Ïä§ÌÖù Í∞úÏàòÏôÄ ÎèôÍ∏∞Ìôî)
    const actualStepCount = document.querySelectorAll('.course-hunting-step-item').length;
    stepCount = actualStepCount;
}

// Î™®Îã¨ Ïô∏Î∂Ä ÌÅ¥Î¶≠ Ïãú Îã´Í∏∞
window.onclick = function(event) {
    const modal = document.getElementById('createModal');
    if (event.target == modal) {
        closeCreateModal();
    }
}

// ÏãúÍ∞Ñ Í≥ÑÏÇ∞ Ìï®Ïàò
function calculateTimeAgo(createdAt) {
    if (!createdAt) return 'Î∞©Í∏àÏ†Ñ';
    
    const createdDate = new Date(createdAt);
    const now = new Date();
    const diffMs = now - createdDate;
    
    if (diffMs < 60000) { // 1Î∂Ñ ÎØ∏Îßå
        return 'Î∞©Í∏àÏ†Ñ';
    } else if (diffMs < 3600000) { // 1ÏãúÍ∞Ñ ÎØ∏Îßå
        const minutes = Math.floor(diffMs / 60000);
        return minutes + 'Î∂ÑÏ†Ñ';
    } else if (diffMs < 86400000) { // 24ÏãúÍ∞Ñ ÎØ∏Îßå
        const hours = Math.floor(diffMs / 3600000);
        return hours + 'ÏãúÍ∞ÑÏ†Ñ';
    } else {
        const days = Math.floor(diffMs / 86400000);
        return days + 'ÏùºÏ†Ñ';
    }
}

// ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú Ï¥àÍ∏∞Ìôî
document.addEventListener('DOMContentLoaded', function() {
    // ÏãúÍ∞Ñ Í≥ÑÏÇ∞
    const timeElements = document.querySelectorAll('.course-hunting-card-time');
    timeElements.forEach(function(element) {
        const createdAt = element.getAttribute('data-created-at');
        const timeTextElement = element.querySelector('.time-text');
        if (timeTextElement) {
            timeTextElement.textContent = calculateTimeAgo(createdAt);
        }
    });
    
    // Ï¥àÍ∏∞ Ïä§ÌÖùÏùò ÏÇ≠Ï†ú Î≤ÑÌäºÏóê Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä
    const initialRemoveButton = document.querySelector('.course-hunting-remove-step');
    if (initialRemoveButton) {
        initialRemoveButton.addEventListener('click', function() {
            const stepNum = parseInt(this.closest('.course-hunting-step-item').getAttribute('data-step'));
            removeStep(stepNum);
        });
    }
    
    // Ìï´ÌîåÎ†àÏù¥Ïä§ Í≤ÄÏÉâ ÏûêÎèôÏôÑÏÑ± Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä
    setupHotplaceAutocomplete();
});

// Ìï´ÌîåÎ†àÏù¥Ïä§ Í≤ÄÏÉâ ÏûêÎèôÏôÑÏÑ± ÏÑ§Ï†ï
function setupHotplaceAutocomplete() {
    // Í∏∞Ï°¥ Ìï´ÌîåÎ†àÏù¥Ïä§ ÏûÖÎ†• ÌïÑÎìúÏóê Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Ï∂îÍ∞Ä
    const existingInputs = document.querySelectorAll('.course-hunting-step-place');
    console.log('Ï∞æÏùÄ ÏûÖÎ†• ÌïÑÎìú Í∞úÏàò:', existingInputs.length);
    existingInputs.forEach((input, index) => {
        console.log(`ÏûÖÎ†• ÌïÑÎìú ${index + 1}Ïóê ÏûêÎèôÏôÑÏÑ± ÏÑ§Ï†ï`);
        setupInputAutocomplete(input);
    });
}

// Í∞úÎ≥Ñ ÏûÖÎ†• ÌïÑÎìúÏóê ÏûêÎèôÏôÑÏÑ± ÏÑ§Ï†ï
function setupInputAutocomplete(input) {
    let searchTimeout;
    let isSelectingFromAutocomplete = false; // ÏûêÎèôÏôÑÏÑ±ÏóêÏÑú ÏÑ†ÌÉù Ï§ëÏù∏ÏßÄ ÌôïÏù∏ÌïòÎäî ÌîåÎûòÍ∑∏
    
    input.addEventListener('input', function() {
        // ÏûêÎèôÏôÑÏÑ±ÏóêÏÑú ÏÑ†ÌÉù Ï§ëÏù¥Î©¥ Í≤ÄÏÉâÌïòÏßÄ ÏïäÏùå
        if (isSelectingFromAutocomplete) {
            return;
        }
        
        const keyword = this.value.trim();
        const searchContainer = this.closest('.hotplace-search-container');
        const autocompleteDiv = searchContainer.querySelector('.hotplace-autocomplete');
        
        console.log('ÏûÖÎ†• Ïù¥Î≤§Ìä∏ Î∞úÏÉù:', keyword);
        console.log('Í≤ÄÏÉâ Ïª®ÌÖåÏù¥ÎÑà:', searchContainer);
        console.log('ÏûêÎèôÏôÑÏÑ± div:', autocompleteDiv);
        
        // Ïù¥Ï†Ñ Í≤ÄÏÉâ ÌÉÄÏù¥Î®∏ ÌÅ¥Î¶¨Ïñ¥
        clearTimeout(searchTimeout);
        
        if (keyword.length < 2) {
            if (autocompleteDiv) {
                autocompleteDiv.style.display = 'none';
            }
            return;
        }
        
        // Ïà®Í≤®ÏßÑ ÌïÑÎìúÏóê IDÍ∞Ä Ïù¥ÎØ∏ ÏÑ§Ï†ïÎêòÏñ¥ ÏûàÏúºÎ©¥ Í≤ÄÏÉâÌïòÏßÄ ÏïäÏùå (ÏûêÎèôÏôÑÏÑ±ÏóêÏÑú ÏÑ†ÌÉùÎêú Í≤ΩÏö∞)
        const placeIdInput = searchContainer.querySelector('.course-hunting-step-place-id');
        if (placeIdInput && placeIdInput.value) {
            // IDÍ∞Ä ÏÑ§Ï†ïÎêòÏñ¥ ÏûàÏúºÎ©¥ ÏûêÎèôÏôÑÏÑ± Ïà®Í∏∞Í∏∞
            if (autocompleteDiv) {
                autocompleteDiv.style.display = 'none';
            }
            return;
        }
        
        // 300ms ÌõÑÏóê Í≤ÄÏÉâ Ïã§Ìñâ (ÌÉÄÏù¥Ìïë Ï§ëÎã® Ïãú)
        searchTimeout = setTimeout(() => {
            searchHotplaces(keyword, autocompleteDiv, this);
        }, 300);
    });
    
    // Ìè¨Ïª§Ïä§ ÏïÑÏõÉ Ïãú ÏûêÎèôÏôÑÏÑ± Ïà®Í∏∞Í∏∞
    input.addEventListener('blur', function() {
        setTimeout(() => {
            const autocompleteDiv = this.closest('.hotplace-search-container').querySelector('.hotplace-autocomplete');
            if (autocompleteDiv) {
                autocompleteDiv.style.display = 'none';
                autocompleteDiv.innerHTML = '';
            }
        }, 200);
    });
}

// Ìï´ÌîåÎ†àÏù¥Ïä§ Í≤ÄÏÉâ
function searchHotplaces(keyword, autocompleteDiv, input) {
    var encodedKeyword = window.encodeURIComponent(keyword);
    fetch('<%=root%>/course/hotplace/search?keyword=' + encodedKeyword)
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            console.log('Í≤ÄÏÉâ Í≤∞Í≥º:', data); // ÎîîÎ≤ÑÍπÖÏö© Î°úÍ∑∏
            if (data && data.length > 0) {
                displayAutocompleteResults(data, autocompleteDiv, input);
            } else {
                autocompleteDiv.style.display = 'none';
                autocompleteDiv.innerHTML = '';
            }
        })
        .catch(error => {
            console.error('Ìï´ÌîåÎ†àÏù¥Ïä§ Í≤ÄÏÉâ Ïò§Î•ò:', error);
            autocompleteDiv.style.display = 'none';
        });
}

// ÏûêÎèôÏôÑÏÑ± Í≤∞Í≥º ÌëúÏãú
function displayAutocompleteResults(results, autocompleteDiv, input) {
    console.log('ÏûêÎèôÏôÑÏÑ± Í≤∞Í≥º ÌëúÏãú ÏãúÏûë');
    console.log('autocompleteDiv:', autocompleteDiv);
    console.log('results:', results);
    
    if (!autocompleteDiv) {
        console.error('ÏûêÎèôÏôÑÏÑ± divÎ•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§!');
        return;
    }
    
    autocompleteDiv.innerHTML = '';
    
    results.forEach(item => {
        const resultItem = document.createElement('div');
        resultItem.className = 'autocomplete-item';
        
        const nameDiv = document.createElement('div');
        nameDiv.className = 'autocomplete-name';
        nameDiv.textContent = item.name;
        
        const addressDiv = document.createElement('div');
        addressDiv.className = 'autocomplete-address';
        addressDiv.textContent = item.address;
        
        resultItem.appendChild(nameDiv);
        resultItem.appendChild(addressDiv);
        
        resultItem.addEventListener('click', function(e) {
            // Ïù¥Î≤§Ìä∏ Ï†ÑÌåå Ï§ëÎã®
            e.preventDefault();
            e.stopPropagation();
            
            // ÏûêÎèôÏôÑÏÑ±ÏóêÏÑú ÏÑ†ÌÉù Ï§ëÏûÑÏùÑ ÌëúÏãú
            isSelectingFromAutocomplete = true;
            
            // ÏûÖÎ†• ÌïÑÎìúÏóê Í∞ÄÍ≤å Ïù¥Î¶Ñ ÏÑ§Ï†ï
            input.value = item.name;
            
            // Ïà®Í≤®ÏßÑ ÌïÑÎìúÏóê Ìï´ÌîåÎ†àÏù¥Ïä§ ID ÏÑ§Ï†ï
            const placeIdInput = input.closest('.hotplace-search-container').querySelector('.course-hunting-step-place-id');
            placeIdInput.value = item.id;
            
            // ÏûêÎèôÏôÑÏÑ± Ïà®Í∏∞Í∏∞
            autocompleteDiv.style.display = 'none';
            autocompleteDiv.innerHTML = '';
            
            // ÏûÖÎ†• ÌïÑÎìúÏóêÏÑú Ìè¨Ïª§Ïä§ Ï†úÍ±∞ (ÏûêÎèôÏôÑÏÑ±Ïù¥ Îã§Ïãú Îú®ÏßÄ ÏïäÎèÑÎ°ù)
            input.blur();
            
            // Ïû†Ïãú ÌõÑ ÌîåÎûòÍ∑∏ Î¶¨ÏÖã (Îã§Ïùå ÏûÖÎ†•ÏùÑ ÏúÑÌï¥)
            setTimeout(() => {
                isSelectingFromAutocomplete = false;
            }, 100);
            
            // Ïù¥Î≤§Ìä∏ ÏôÑÏ†Ñ Ï§ëÎã®
            return false;
        });
        
        autocompleteDiv.appendChild(resultItem);
    });
    
    autocompleteDiv.style.display = 'block';
    

    
    console.log('ÏûêÎèôÏôÑÏÑ± ÌëúÏãú ÏôÑÎ£å, display:', autocompleteDiv.style.display);
    console.log('ÏûêÎèôÏôÑÏÑ± ÏöîÏÜå Í∞úÏàò:', autocompleteDiv.children.length);
    console.log('ÏûêÎèôÏôÑÏÑ± Ïä§ÌÉÄÏùº:', autocompleteDiv.style.cssText);
    console.log('ÏûêÎèôÏôÑÏÑ± ÏúÑÏπò:', autocompleteDiv.getBoundingClientRect());
    console.log('ÏûêÎèôÏôÑÏÑ± z-index:', autocompleteDiv.style.zIndex);
}

// Ìèº Ï†úÏ∂ú
console.log('Ìèº Ï†úÏ∂ú Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà Îì±Î°ù ÏãúÏûë');
document.getElementById('courseForm').addEventListener('submit', function(e) {
    console.log('Ìèº Ï†úÏ∂ú Ïù¥Î≤§Ìä∏ Î∞úÏÉù!');
    e.preventDefault();
    
    console.log('Ìèº Ï†úÏ∂ú Ï≤òÎ¶¨ ÏãúÏûë');
    
    // ÎπÑÎ∞ÄÎ≤àÌò∏ Í≤ÄÏ¶ù
    const passwordInput = document.getElementById('coursePassword');
    if (passwordInput && passwordInput.style.display !== 'none') {
        const password = passwordInput.value;
        if (password.length !== 4 || !/^\d{4}$/.test(password)) {
            alert('ÎπÑÎ∞ÄÎ≤àÌò∏Îäî Ïà´Ïûê 4ÏûêÎ¶¨Î°ú ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
            passwordInput.focus();
            return;
        }
    }
    
    // Ìèº Îç∞Ïù¥ÌÑ∞ ÏàòÏßë
    const formData = {
        title: document.getElementById('courseTitle').value,
        summary: document.getElementById('courseSummary').value,
        nickname: document.getElementById('courseNickname').value,
        passwd_hash: document.getElementById('coursePassword').value,
        steps: []
    };
    
    // Ïä§ÌÖù Îç∞Ïù¥ÌÑ∞ ÏàòÏßë
    const stepElements = document.querySelectorAll('.course-hunting-step-item');
    console.log('Ï∞æÏùÄ Ïä§ÌÖù ÏöîÏÜå Í∞úÏàò:', stepElements.length);
    console.log('Ïä§ÌÖù ÏöîÏÜåÎì§:', stepElements);
    
    // Ïú†Ìö®Ìïú Ïä§ÌÖùÎßå ÏàòÏßë (placeIdÍ∞Ä ÏûàÎäî Ïä§ÌÖùÎßå)
    const validSteps = [];
    
    stepElements.forEach((stepElement, index) => {
        const placeInput = stepElement.querySelector('.course-hunting-step-place');
        const placeIdInput = stepElement.querySelector('.course-hunting-step-place-id');
        const descriptionInput = stepElement.querySelector('.course-hunting-step-description');
        
        console.log(`Ïä§ÌÖù ${index + 1} ÏöîÏÜå:`, stepElement);
        console.log(`Ïä§ÌÖù ${index + 1} placeInput:`, placeInput);
        console.log(`Ïä§ÌÖù ${index + 1} placeIdInput:`, placeIdInput);
        console.log(`Ïä§ÌÖù ${index + 1} descriptionInput:`, descriptionInput);
        
        const placeName = placeInput ? placeInput.value : '';
        const placeId = placeIdInput ? placeIdInput.value : '';
        const description = descriptionInput ? descriptionInput.value : '';
        
        console.log(`Ïä§ÌÖù ${index + 1}:`, {
            placeName: placeName,
            placeId: placeId,
            description: description
        });
        
        // placeIdÍ∞Ä ÏûàÎäî Ïä§ÌÖùÎßå Ïú†Ìö®Ìïú Ïä§ÌÖùÏúºÎ°ú Í∞ÑÏ£º
        
        if (placeId && placeId.trim() !== '') {
            validSteps.push({
                stepNo: validSteps.length + 1, // Ïú†Ìö®Ìïú Ïä§ÌÖùÎßå Î≤àÌò∏ Ïû¨Ìï†Îãπ
                placeName: placeName,
                placeId: placeId,
                description: description,
                originalIndex: index // ÏõêÎ≥∏ Ïù∏Îç±Ïä§ Ï†ÄÏû•
            });
        } else if (placeName && placeName.trim() !== '') {
            // placeIdÍ∞Ä ÏóÜÏßÄÎßå placeNameÏù¥ ÏûàÎäî Í≤ΩÏö∞ Í≤ΩÍ≥†
            alert(`Ïä§ÌÖù ${index + 1}: Ìï´ÌîåÎ†àÏù¥Ïä§Î•º ÏûêÎèôÏôÑÏÑ±ÏóêÏÑú ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.`);
            return;
        }
    });
    
    console.log('Ïú†Ìö®Ìïú Ïä§ÌÖù Í∞úÏàò:', validSteps.length);
    console.log('Ïú†Ìö®Ìïú Ïä§ÌÖùÎì§:', validSteps);
    
    // Ïú†Ìö®Ìïú Ïä§ÌÖùÏù¥ ÏóÜÏúºÎ©¥ Îì±Î°ù Ï§ëÎã®
    if (validSteps.length === 0) {
        alert('ÏµúÏÜå ÌïòÎÇòÏùò Ìï´ÌîåÎ†àÏù¥Ïä§Î•º ÏÑ†ÌÉùÌï¥Ï£ºÏÑ∏Ïöî.');
        return;
    }
    
    // FormDataÎ•º ÏÇ¨Ïö©Ìï¥ÏÑú ÌååÏùºÍ≥º ÌÖçÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞Î•º Ìï®Íªò Ï†ÑÏÜ°
    const formDataToSend = new FormData();
    formDataToSend.append('title', formData.title);
    formDataToSend.append('summary', formData.summary);
    formDataToSend.append('nickname', formData.nickname);
    formDataToSend.append('passwd_hash', formData.passwd_hash);
    
         // Ïä§ÌÖù Îç∞Ïù¥ÌÑ∞ÏôÄ ÌååÏùºÏùÑ FormDataÏóê Ï∂îÍ∞Ä (Ïú†Ìö®Ìïú Ïä§ÌÖùÎßå)
     console.log('FormDataÏóê Ïä§ÌÖù Ï∂îÍ∞Ä ÏãúÏûë');
     for (let i = 0; i < validSteps.length; i++) {
         const step = validSteps[i];
         const validIndex = i;
         
         // Ìï¥Îãπ Ïä§ÌÖùÏùò ÌååÏùº Ï∞æÍ∏∞
         const stepElement = stepElements[step.originalIndex];
         const fileInput = stepElement.querySelector('.course-hunting-step-photo');
         
         console.log(`FormData Ïú†Ìö® Ïä§ÌÖù ${validIndex + 1} Ï∂îÍ∞Ä:`, {
             stepNo: step.stepNo,
             placeName: step.placeName,
             placeId: step.placeId,
             description: step.description,
             originalIndex: step.originalIndex
         });
         
         // ÏÑúÎ≤ÑÍ∞Ä Í∏∞ÎåÄÌïòÎäî ÌòïÌÉúÎ°ú FormData Ï∂îÍ∞Ä (steps[Ïù∏Îç±Ïä§].ÌïÑÎìúÎ™Ö ÌòïÌÉú)
         formDataToSend.append(`steps[${validIndex}].stepNo`, step.stepNo);
         formDataToSend.append(`steps[${validIndex}].placeName`, step.placeName);
         formDataToSend.append(`steps[${validIndex}].placeId`, step.placeId);
         formDataToSend.append(`steps[${validIndex}].description`, step.description);
         
         // ÌååÏùºÏù¥ ÏÑ†ÌÉùÎêú Í≤ΩÏö∞ÏóêÎßå Ï∂îÍ∞Ä - Í∞Å Ïä§ÌÖùÎ≥ÑÎ°ú Í≥†Ïú†Ìïú ÌÇ§ ÏÇ¨Ïö©
         if (fileInput && fileInput.files.length > 0) {
             var photoKey = 'stepPhoto_' + validIndex;
             console.log('Ïä§ÌÖù ' + (validIndex + 1) + ' ÌååÏùº Ï∂îÍ∞Ä:', fileInput.files[0].name, 'ÌÅ¨Í∏∞:', fileInput.files[0].size, 'ÌÇ§:', photoKey);
             formDataToSend.append(photoKey, fileInput.files[0]);
         } else {
             console.log('Ïä§ÌÖù ' + (validIndex + 1) + ' ÌååÏùº ÏóÜÏùå');
             // ÌååÏùºÏù¥ ÏóÜÎäî Í≤ΩÏö∞Îäî Ï∂îÍ∞ÄÌïòÏßÄ ÏïäÏùå
         }
         
         // ÎîîÎ≤ÑÍπÖ: FormDataÏóê Ï∂îÍ∞ÄÎêú ÎÇ¥Ïö© ÌôïÏù∏
         console.log(`Ïä§ÌÖù ${validIndex + 1} FormData Ï∂îÍ∞Ä ÏôÑÎ£å`);
     }
    console.log('FormDataÏóê Ïä§ÌÖù Ï∂îÍ∞Ä ÏôÑÎ£å');
    
    // FormData ÎÇ¥Ïö© Î°úÍπÖ
    console.log('=== FormData ÎÇ¥Ïö© ===');
    formDataToSend.forEach((value, key) => {
        console.log(key + ': ' + value);
    });
    console.log('=== FormData ÎÇ¥Ïö© ÏôÑÎ£å ===');
    
    // JWT ÌÜ†ÌÅ∞ Í∞ÄÏ†∏Ïò§Í∏∞
    const token = getToken();
    
    // AJAXÎ°ú ÏΩîÏä§ Îì±Î°ù (ÌååÏùº Ìè¨Ìï®)
    const fetchOptions = {
        method: 'POST',
        body: formDataToSend // Content-TypeÏùÄ Î∏åÎùºÏö∞Ï†ÄÍ∞Ä ÏûêÎèôÏúºÎ°ú ÏÑ§Ï†ï
    };
    
    // JWT ÌÜ†ÌÅ∞Ïù¥ ÏûàÏúºÎ©¥ Ìó§ÎçîÏóê Ï∂îÍ∞Ä
    if (token) {
        fetchOptions.headers = {
            'Authorization': `Bearer ${token}`
        };
    }
    
    fetch('<%=root%>/course/create', fetchOptions)
    .then(response => response.text())
    .then(result => {
        if (result === 'success') {
            alert('ÏΩîÏä§Í∞Ä Îì±Î°ùÎêòÏóàÏäµÎãàÎã§!');
            closeCreateModal();
            loadCourses(); // Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
        } else {
            alert('Îì±Î°ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        alert('Îì±Î°ùÏóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.');
    });
});

// Í≤ÄÏÉâ Ï¥àÍ∏∞Ìôî Ìï®Ïàò
function clearSearch(button) {
    const searchContainer = button.closest('.hotplace-search-container');
    const input = searchContainer.querySelector('.course-hunting-step-place');
    const placeIdInput = searchContainer.querySelector('.course-hunting-step-place-id');
    const autocompleteDiv = searchContainer.querySelector('.hotplace-autocomplete');
    
    // ÏûÖÎ†• ÌïÑÎìú Ï¥àÍ∏∞Ìôî
    input.value = '';
    placeIdInput.value = '';
    
    // ÏûêÎèôÏôÑÏÑ± Ïà®Í∏∞Í∏∞
    if (autocompleteDiv) {
        autocompleteDiv.style.display = 'none';
    }
    
    // ÏûÖÎ†• ÌïÑÎìúÏóê Ìè¨Ïª§Ïä§
    input.focus();
    
    // ÏÉàÎ°úÍ≥†Ïπ® Î≤ÑÌäº Ïï†ÎãàÎ©îÏù¥ÏÖò
    const icon = button.querySelector('.refresh-icon');
    if (icon) {
        icon.style.transform = 'rotate(360deg)';
        icon.style.transition = 'transform 0.5s ease';
        
        setTimeout(() => {
            icon.style.transform = 'rotate(0deg)';
        }, 500);
    }
}
</script>